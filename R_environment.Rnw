% Define knitr options
% !Rnw weave = knitr
% Set global chunk options
<<knitr_setup, include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(prompt=TRUE, tidy=FALSE, strip.white=FALSE, comment=NA, highlight=FALSE, message=FALSE, warning=FALSE, size='scriptsize', fig.width=6, fig.height=5)
options(width=60, dev='pdf')
thm <- knit_theme$get("acid")
knit_theme$set(thm)
@


% Define document options
\documentclass[10pt]{beamer}
\mode<presentation>
\usetheme{AnnArbor}
% \usecolortheme{whale}
% Uncover everything in a step-wise fashion
% \beamerdefaultoverlayspecification{<+->}
% amsmath package for math symbols
% \usepackage{amsmath}
\usepackage[latin1]{inputenc}
\usepackage{hyperref}
\usepackage{fancybox}
\usepackage{url}
\usepackage[backend=bibtex,style=alphabetic]{biblatex} % bibstyle=numeric
% \bibliographystyle{amsalpha} % doesn't work
\addbibresource{FRE6871_bib.bib}
% \addbibresource[location=remote]{http://www.citeulike.org/user/jerzyp}
\renewcommand\bibfont{\footnotesize}
\renewcommand{\pgfuseimage}[1]{\scalebox{0.75}{\includegraphics{#1}}} % scale bib icons
\setbeamertemplate{bibliography item}[text] % set bib icons
% \setbeamertemplate{bibliography item}{} % remove bib icons

% \usepackage{enumerate}
% \let\emph\textbf
% \let\alert\textbf
% Define colors for hyperlinks
\definecolor{links}{HTML}{2A1B81}
\hypersetup{colorlinks=true,linkcolor=,urlcolor=links}
% Make url text footnotesize
\renewcommand\UrlFont{\footnotesize}
% Make institute text italic and small
\setbeamerfont{institute}{size=\small,shape=\itshape,bg=red,fg=red}
\setbeamerfont{date}{size=\small}
\setbeamerfont{block title}{size=\normalsize} % shape=\itshape
\setbeamerfont{block body}{size=\footnotesize}



% Title page setup
\title[The \texttt{R} Environment]{The \texttt{R} Environment}
\subtitle{FRE6871 R in Finance, Fall 2014}
\institute[NYU Polytechnic]{NYU Polytechnic School of Engineering}
\titlegraphic{\includegraphics[scale=0.8]{engineering_long_color}}
\author[Jerzy Pawlowski]{Jerzy Pawlowski \texorpdfstring{(\textit{\color{blue}{\footnotesize{jp3900@nyu.edu}}})}{}}
\date{\today}



%%%%%%%%%%%%%%%
\begin{document}


%%%%%%%%%%%%%%%
\maketitle



%%%%%%%%%%%%%%%
\section{Getting Started With \texttt{R}}


%%%%%%%%%%%%%%%
\subsection{What is \texttt{R}?}
\begin{frame}[t]{\subsecname}
\vspace{-1em}
\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    \begin{itemize}
      \item Is an open-source software environment for statistical computing and graphics,
      \item Is an interpreted language,
      \item Is a functional language,
      \item Supports object-oriented programming with classes and methods,
      \item Is extended through user-created packages,
      \item Is written in \texttt{R} itself and in \texttt{C/C++}.
    \end{itemize}
    \hskip1em\url{http://www.r-project.org/}\\
    \hskip1em\url{http://en.wikipedia.org/wiki/R_(programming_language)}\\
%    \hskip1em\url{http://blog.revolutionanalytics.com/2011/08/what-language-is-r-written-in.html}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.2\textwidth]{Rlogo.jpg}
\end{columns}
\end{block}
\pause

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    The \texttt{R} software and its libraries are released under the GNU General Public License\\
    \hskip1em\url{http://www.r-project.org/Licenses}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.2\textwidth]{GPLv3_Logo.png}
\end{columns}
\end{block}
\pause

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    Many other \texttt{R} software are released under the Creative Commons Attribution-ShareAlike License\\
    \hskip1em\url{http://creativecommons.org}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.1\textwidth]{CC_License.png}
\end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Installing \texttt{R} and \texttt{RStudio}}
\begin{frame}[t]{\subsecname}

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    Download \texttt{R} Interpreter from \texttt{CRAN} (Comprehensive \texttt{R} Archive Network)\\
    \hskip1em\url{http://cran.r-project.org/}
    \vskip1ex
    Click on:\\
    \href{C:/Program Files/R/R-3.1.0/bin/x64/RGui.exe}{C:/Program Files/R/R-3.1.0/bin/x64/RGui.exe}\\
    to invoke the \texttt{RGui} interface,
  \column{0.3\textwidth}
    \includegraphics[height=0.2\textwidth]{Rlogo.jpg}
\end{columns}
\end{block}
\pause

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    Download \texttt{RStudio} IDE (Integrated Development Environment)\\
    \hskip1em\url{http://www.rstudio.com/ide}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.2\textwidth]{RStudio_logo.png}
\end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Using \texttt{RStudio}}
\begin{frame}[t]{\subsecname}

% Snapshot of \texttt{RStudio} GUI
\includegraphics[height=0.6\textwidth]{RStudio.png}

\end{frame}



%%%%%%%%%%%%%%%
% \section{First Steps in \texttt{R}}
\section{The \texttt{R} Environment}




%%%%%%%%%%%%%%%
\subsection{A First \texttt{R} Session}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      Variables are created by an assignment operation, and they don't have to be declared,
      \vskip1ex
      The standard assignment operator in \texttt{R} is the arrow symbol \texttt{"<-"},
      \vskip1ex
      \texttt{R} interprets text in quotes ("") as character strings,
      \vskip1ex
      Text that is not in quotes ("") is interpreted as a \texttt{symbol} or \texttt{expression},
      \vskip1ex
      Typing a \texttt{symbol} or \texttt{expression} evaluates it,
      \vskip1ex
      All text after the \texttt{"\#}" symbol is treated as comments,
      \vskip1ex
      \texttt{R} is a functional language, and \texttt{R} commands are functions, so they must be followed by parentheses "\texttt{()}",
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
my_var <- 3  # "<-" and "=" are valid assignment operators

my_var  # typing a symbol or expression evaluates it

my_var <- "Hello World!"  # text in quotes is interpreted as a string

my_var  # typing a symbol or expression evaluates it
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Exploring an \texttt{R} Session}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{getwd()} returns a vector of length \texttt{1}, with the first element containing a string with the name of the current working directory (\texttt{cwd}),
      \vskip1ex
      The function \texttt{setwd()} accepts a character string as input (the name of the directory), and sets the working directory to that string,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
getwd()  # get cwd
setwd("C:/Develop/R")  # set cwd
getwd()  # get cwd
      @
  \end{columns}
\end{block}

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      Get system date and time
      \vskip4ex
      Just the date
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
Sys.time()  # get date and time

Sys.Date()  # get date only
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{The \texttt{R} Workspace}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The workspace is the current \texttt{R} working environment, which includes all user-defined objects and the command history,
      \vskip1ex
      The function \texttt{ls()} returns names of objects in the \texttt{R} workspace,
      \vskip1ex
      The function \texttt{rm()} removes objects from the \texttt{R} workspace,
      \vskip1ex
      The workspace can be saved into and loaded back from an \texttt{*.RData} file (binary file format),
      \vskip1ex
      The function \texttt{save.image()} saves the whole workspace,
      \vskip1ex
      The function \texttt{save()} saves just the selected objects,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=2:30>>=
rm(list=ls())
var1 <- 3  # define new object
ls()  # list all objects in workspace
# list objects starting with "v"
ls(pattern=glob2rx("v*"))
save.image()  # save workspace to file .RData in cwd
rm(var1)  # remove object
ls()  # list objects
load(".RData")
ls()  # list objects

var2 <- 5  # define another object
save(var1, var2,  # save selected objects
     file="C:/Develop/data/my_data.RData")

rm(list=ls())  # remove all objects
ls()  # list objects

load(file="C:/Develop/data/my_data.RData")
ls()  # list objects
      @
  \end{columns}
\end{block}
% \pause

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{\subsecname \hskip0.5em (cont.)}
\vspace{-1em}

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      When you quit \texttt{R} you'll be prompted "Save workspace image?"\\
      \vskip1ex
      If you answer $YES$ then the workspace will be saved into the \texttt{.RData} file in the \texttt{cwd},\\
      \vskip1ex
      When you start \texttt{R} again, the workspace will be automatically loaded from the existing \texttt{.RData} file,\\
    \column{0.6\textwidth}
      \vspace{-1em}
      <<eval=FALSE>>=
        q()  # quit R session
      @
  \end{columns}
\end{block}
\pause

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{history()} displays recent commands,\\
      \vskip1ex
      You can also save and load the command history from a file,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<eval=FALSE>>=
history(5)  # display last 5 commands
savehistory(file="myfile")  # default is ".Rhistory" 
loadhistory(file="myfile")  # default is ".Rhistory"
      @
  \end{columns}
\end{block}
% \pause

\end{frame}


%%%%%%%%%%%%%%%
\subsection{\texttt{R} Session Info}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{sessionInfo()} returns information about the current \texttt{R} session,
      \begin{itemize}
        \item \texttt{R version},
        \item \texttt{OS platform},
        \item \texttt{locale} settings,
        \item list of packages that are loaded and attached to the search path,
        \item list of packages that are loaded, but \emph{not} attached to the search path,
      \end{itemize}
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
sessionInfo()  # get R version and other session info
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Environment Variables}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      \texttt{R} uses environment variables to store information about its environment,
      \begin{itemize}
        \item \texttt{HOME} stores the \texttt{R} user Home directory,
        \item \texttt{R\_HOME} stores the root directory of the \texttt{R} installation,
      \end{itemize}
      The functions \texttt{Sys.setenv()} and \texttt{Sys.getenv()} set and retrieve the values of environment variables,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
Sys.getenv()[5:7]  # list some environment variables

Sys.getenv("Home")  # get R user HOME directory

Sys.setenv(Home='C:/Develop')  # set HOME directory

Sys.getenv("Home")  # get user HOME directory

Sys.getenv("R_home")  # get R_HOME directory

R.home()  # get R_HOME directory

R.home("etc")  # get "etc" sub-directory of R_HOME
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Global \texttt{options} Settings}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      \texttt{R} uses a list of global \texttt{options} which affect how \texttt{R} computes and displays results,
      \vskip1ex
      The function \texttt{options()} sets and retrieves the values of global \texttt{options},
    \column{0.6\textwidth}
      \vspace{-1em}
      <<eval=FALSE>>=
# ?options  # long list of global options

# interpret strings as characters, not factors
options("stringsAsFactors")
options(stringsAsFactors=FALSE)

# number of digits printed for numeric values
options(digits=3)

# number of items printed to console
options(max.print=80)

# warning levels options
# negative - warnings are ignored
options(warn=-1)
# zero - warnings are stored and printed after top-level function has completed
options(warn=0)
# one - warnings are printed as they occur
options(warn=1)
# two or larger - warnings are turned into errors
options(warn=2)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Constructing File Paths}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      Names of \emph{file paths} can be constructed using the function \texttt{paste()},
      \vskip1ex
      The function \texttt{file.path()} is similar to \texttt{paste()}, but automatically uses the correct separator for the platform,
      \vskip1ex
      The function \texttt{normalizePath()} performs tilde-expansions and displays file paths in user-readable format,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
# R startup (site) directory
paste(R.home(), 'etc', sep='/')

file.path(R.home(), 'etc')  # better way

# perform tilde-expansions and convert to readable format
normalizePath(file.path(R.home(), 'etc'), winslash="/")

normalizePath(R.home("etc"), winslash="/")
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{\texttt{R} System Directories under \texttt{Windows}}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      \texttt{R} uses several different directories to search, read, and store files:
      \begin{itemize}
        \item \texttt{Windows} user \texttt{HOME} directory: \texttt{'\textasciitilde{}'} (\texttt{'\%USERPROFILE\%/Documents'}),
        \item \texttt{R} user \texttt{HOME} directory,
        \item \texttt{cwd} current working directory - the default directory for storing and retrieving user files (such as \texttt{.Rhistory}, \texttt{*.RData}, etc.),
        \item \texttt{R\_HOME} root directory of the \texttt{R} installation,
        \item \texttt{R} startup (site) directory: \texttt{R\_HOME/etc/},
      \end{itemize}
      By default, the \texttt{R} user \texttt{HOME} directory is the \texttt{Windows} user \texttt{HOME} directory,
      \vskip1ex
      The \texttt{cwd} is set to the directory from which \texttt{R} is invoked, or the \texttt{R} user \texttt{HOME} directory,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
normalizePath('~', winslash="/")  # Windows user HOME directory

Sys.getenv("Home")  # R user HOME directory

setwd("C:/Develop/R")
getwd()  # current working directory

# R startup (site) directory
normalizePath(file.path(R.home(), 'etc'), winslash="/")

# R executable directory
normalizePath(file.path(R.home(), 'bin/x64'), winslash="/")

# R documentation directory
normalizePath(file.path(R.home(), 'doc/manual'), winslash="/")
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{File and Directory Listing Functions}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      \vskip1ex
      The functions \texttt{list.files()} and \texttt{dir()} return a vector of names of files in a given directory,
      \vskip1ex
      \texttt{list.dirs()} lists the directories in a given directory,
      \vskip1ex
      \texttt{Sys.glob()} lists files matching names obtained from wildcard expansion,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
setwd("C:/Develop/data")
sample(dir(), 5)  # get 5 file names - dir() lists all files
dir(pattern="csv")  # list files containing "csv"
list.files(R.home())  # all files in R_HOME directory
list.files(R.home("etc"))  # all files in "etc" sub-directory of R_HOME directory
list.dirs()  # directories in cwd
list.dirs(R.home("etc"))  # directories in "etc" sub-directory
Sys.glob("*.csv")
Sys.glob(R.home("etc"))
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Invoking an \texttt{R} Session in \texttt{Windows}}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      An \texttt{R} session can run in several different ways:
      \begin{itemize}
        \item In an \texttt{R} terminal (by invoking \texttt{R.exe} or \texttt{Rterm.exe}),
        \item In an \texttt{R} RGui (by invoking \texttt{RGui.exe}),
        \item In an \texttt{RStudio} session (or some other IDE),
      \end{itemize}
      The initial value of the \texttt{cwd} depends on how the \texttt{R} session is invoked.\\
      If \texttt{R} is invoked:
      \begin{itemize}
        \item from the \texttt{Windows} menu, then \texttt{cwd} is set to the \texttt{R} user \texttt{HOME} directory,
        \item by clicking on a file (\texttt{*.R}, \texttt{*.RData}, etc.), then \texttt{cwd} is set to the file's directory,
        \item by typing \texttt{R.exe} or \texttt{Rterm.exe} in the command shell (after setting the \texttt{PATH}), then \texttt{cwd} is set to the directory where the command was typed,
      \end{itemize}
    \column{0.5\textwidth}
      \vspace{-1em}
      <<>>=
getwd()  # get cwd
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{\texttt{R} Session Startup}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      At startup \texttt{R} sources (reads) several types of files, in the following order:
      \begin{itemize}
        \item \texttt{Renviron} files defining environment variables,
        \item \texttt{Rprofile} files containing code executed at \texttt{R} startup,
        \item \texttt{RData} files containing data to be loaded at \texttt{R} startup,
      \end{itemize}
      \texttt{R} sources files from several directories, in the following order:
      \begin{itemize}
        \item \texttt{R} startup directory: \texttt{Renviron.site} and \texttt{Rprofile.site} files,
        \item \texttt{cwd} directory: \texttt{.Renviron}, \texttt{.Rprofile}, and \texttt{.Rdata} files,
        \item \texttt{HOME} user directory (only if no files found in \texttt{cwd}),
      \end{itemize}
      The above startup process can be customized by setting environment variables,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=2:30>>=
setwd("C:/Develop/R")
# help(Startup)  # description of R session startup mechanism

# files in R startup directory directory
dir(normalizePath(file.path(R.home(), 'etc'), winslash="/"))

# *.R* files in cwd directory
getwd()
dir(getwd(), all.files=TRUE, pattern="\\.R")
dir(getwd(), all.files=TRUE, pattern=glob2rx("*.R*"))
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Customizing the \texttt{R} Environment}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      users can customize their \texttt{R} environments and workspace by creating custom startup files in different working directories.
      The {Renviron} and {Rprofile} files can be placed in any directory
      \texttt{Renviron} files defining environment variables,
      \texttt{Rprofile} files containing code executed at \texttt{R} startup,
      If \texttt{R} is invoked from a terminal, then the directory from which it's invoked will be sourced.
      At startup \texttt{R} searches for startup files in the \texttt{cwd} and \texttt{R} home directory,
      every directory can have its own special initialization file

      environment files (containing environment variables to be set), and 
      .Rprofile files containing \texttt{R} scripts (code),
      
      startup files may contain environment variables, option settings, and other \texttt{R} scripts
      startup profile file of R code
      \href{C:/Program Files/R/R-3.1.0/}{C:/Program Files/R/R-3.1.0/}\\
      to process for setting environment variables. 
      executes
      If no '.Rprofile' file is found
in the startup directory, then R looks for a '.Rprofile' file in the user's home directory
and uses that (if it exists).
      The function \texttt{getwd()} returns a vector of length \texttt{1}, with the first element containing a string with the name of the current working directory (\texttt{cwd}),
      \texttt{R} sources the \texttt{.Rprofile} file in the current working directory or in the user's home directory (in that order)
      every directory can have its own custom initialization file
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
setwd("C:/Develop/R")

scan(file=".Rprofile", what=character(), sep="\n")
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{The \texttt{Renviron} files}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      At startup \texttt{R} searches for startup files in the \texttt{cwd} and \texttt{R} home directory,

Environment variables can be supplied as 'symbol=value' pairs on the command line.
      environment files (containing environment variables to be set), and 
      .Rprofile files containing \texttt{R} scripts (code),
      
      startup files may contain environment variables, option settings, and other \texttt{R} scripts
      startup profile file of R code
      \href{C:/Program Files/R/R-3.1.0/}{C:/Program Files/R/R-3.1.0/}\\
      to process for setting environment variables. 
      executes
      If no '.Rprofile' file is found
in the startup directory, then R looks for a '.Rprofile' file in the user's home directory
and uses that (if it exists).
      The function \texttt{getwd()} returns a vector of length \texttt{1}, with the first element containing a string with the name of the current working directory (\texttt{cwd}),
      \texttt{R} sources the \texttt{.Rprofile} file in the current working directory or in the user's home directory (in that order)
      every directory can have its own custom initialization file
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
cat("sourcing .Rprofile file\n")


      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{The \texttt{Rprofile} files}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      At startup \texttt{R} searches for startup files in the \texttt{cwd} and \texttt{R} home directory,


      environment files (containing environment variables to be set), and 
      .Rprofile files containing \texttt{R} scripts (code),
      
      startup files may contain environment variables, option settings, and other \texttt{R} scripts
      startup profile file of R code
      \href{C:/Program Files/R/R-3.1.0/}{C:/Program Files/R/R-3.1.0/}\\
      to process for setting environment variables. 
      executes
      If no '.Rprofile' file is found
in the startup directory, then R looks for a '.Rprofile' file in the user's home directory
and uses that (if it exists).
      \texttt{R} sources the \texttt{.Rprofile} file in the current working directory or in the user's home directory (in that order)
      every directory can have its own custom initialization file
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
cat("sourcing .Rprofile file\n")


      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Running \texttt{R} Scripts and Batch Processes}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      .Rprofile files  (code),
to execute a file foo.R containing \texttt{R} scripts

R CMD BATCH "--args arg1 arg2" foo.R \&

Rscript -e "source('functions.txt');f1();f2()" > out.txt

      startup files may contain environment variables, option settings, and other \texttt{R} scripts
      startup profile file of R code
      \href{C:/Program Files/R/R-3.1.0/}{C:/Program Files/R/R-3.1.0/}\\
      to process for setting environment variables. 
      executes
      If no '.Rprofile' file is found
in the startup directory, then R looks for a '.Rprofile' file in the user's home directory
and uses that (if it exists).
      The function \texttt{getwd()} returns a vector of length \texttt{1}, with the first element containing a string with the name of the current working directory (\texttt{cwd}),
      \texttt{R} sources the \texttt{.Rprofile} file in the current working directory or in the user's home directory (in that order)
      every directory can have its own custom initialization file
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
# source("script.R", echo=TRUE)  # source script
      @
  \end{columns}
\end{block}

\end{frame}



%%%%%%%%%%%%%%%
% \section{Managing the \texttt{R} Environment}



%%%%%%%%%%%%%%%
\section{Environments in \texttt{R}}


%%%%%%%%%%%%%%%
\subsection{\secname}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      Environments consist of a \emph{frame} (a set of symbol-value pairs) and an \emph{enclosure} (a pointer to an enclosing environment),
      \vskip1ex
      There are three system environments:
      \begin{itemize}
        \item \texttt{globalenv()} the user's workspace,
        \item \texttt{baseenv()} the environment of the base package,
        \item \texttt{emptyenv()} the only environment without an enclosure,
      \end{itemize}
      Environments form a tree structure of successive enclosures, with the empty environment at its root,
      \vskip1ex
      Packages have their own environments,
      \vskip1ex
      The enclosure of the base package is the empty environment,
    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30>>=
rm(list=ls())
baseenv()  # get base environment
globalenv()  # get global environment
environment()  # get current environment
class(environment())  # get environment class
glob_var <- 1  # define variable in current environment
ls(environment())  # get objects in current environment

new_env <- new.env()  # create new environment
parent.env(new_env)  # get calling environment of new environment
assign("new_var1", 3, envir=new_env)  # assign Value to Name
new_env$new_var2 <- 11  # create object in new environment
ls(new_env)  # get objects in new environment
ls(environment())  # get objects in current environment
new_env$new_var1  # environments are subset like lists
new_env[['new_var1']]  # environments are subset like lists
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{The \texttt{R} Search Path}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      \texttt{R} evaluates variables using the search path, a series of environments:
      \begin{itemize}
        \item global environment,
        \item package environments,
        \item base environment,
      \end{itemize}
      The function \texttt{search()} returns the search path for \texttt{R} objects,
      \vskip1ex
      The function \texttt{attach()} attaches objects to the search path,
      \vskip1ex
      Using \texttt{attach()} allows referencing object components by their names alone, rather than as components of objects,
      \vskip1ex
      The function \texttt{detach()} detaches objects from the search path,
      \begin{block}{\color{red}{Rule of Thumb}}
        Be very careful with using \texttt{attach()},
        \vskip1ex
        Make sure to \texttt{detach()} objects once they're not needed,
      \end{block}
    \column{0.6\textwidth}
      \vspace{-1em}
        <<>>=
search()  # get search path for R objects
my_list <- list(flowers=c('rose', 'daisy', 'tulip'),  # create a list
                        trees=c('pine', 'oak', 'maple'))
my_list$trees
attach(my_list)
trees
search()  # get search path for R objects
detach(my_list)
head(trees)  # "trees" is part of the datasets base package
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Referencing Object Components \texttt{with()}}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The \texttt{with()} function evaluates an expression in an environment constructed from the data,
      \vskip1ex
      \texttt{with()} allows referencing object components by their names alone,
      \vskip1ex
      It's often better to use \texttt{with()} instead of \texttt{attach()},
    \column{0.6\textwidth}
      \vspace{-1em}
        <<>>=
# "trees" is in datasets base package
head(trees, 3)
colnames(trees)
mean(Girth)
mean(trees$Girth)
with(trees, c(mean(Girth), mean(Height), mean(Volume)))
      @
  \end{columns}
\end{block}

\end{frame}



%%%%%%%%%%%%%%%
\section{Data Input and Output}


%%%%%%%%%%%%%%%
\subsection{Saving \texttt{R} Output to a File}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{sink()} diverts \texttt{R} \emph{text} output (excluding \emph{graphics}) to a file, or ends the diversion,
      \vskip1ex
      Remember to call \texttt{sink()} to end the diversion!
      \vskip1ex
      The function \texttt{pdf()} diverts \emph{graphics} output to a pdf file (text output isn't diverted), in vector graphics format,
      \vskip1ex
      The functions \texttt{png()}, \texttt{jpeg()}, \texttt{bmp()}, and \texttt{tiff()} divert \emph{graphics} output to graphics files (text output isn't diverted), in pixel graphics format,
      \vskip1ex
      The function \texttt{dev.off()} ends the diversion,
    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=2:30>>=
setwd("C:/Develop/data")
{
sink("sinkdata.txt")# redirect text output to file

cat("Redirect text output from R\n")
print(runif(10))
cat("\nEnd data\nbye\n")

sink()  # turn redirect off

pdf("Rgraph.pdf", width=7, height=4)  # redirect graphics to pdf file

cat("Redirect data from R into pdf file\n")
my_var <- seq(-2*pi, 2*pi, len=100)
plot(x=my_var, y=sin(my_var), main="Sine wave", 
   xlab="", ylab="", type='l', lwd=2, col="red")
cat("\nEnd data\nbye\n")

dev.off()  # turn pdf output off

png("Rgraph.png")  # redirect output to png file

cat("Redirect graphics from R into png file\n")
plot(x=my_var, y=sin(my_var), main="Sine wave", 
 xlab="", ylab="", type='l', lwd=2, col="red")
cat("\nEnd data\nbye\n")

dev.off()  # turn png output off
}
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Writing Text Strings}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{cat()} concatenates strings and writes them to standard output or to files,
      \vskip1ex
      \texttt{cat()} interprets its argument character string and its escape sequences (\texttt{'\textbackslash{}'}), but doesn't return a value,
      \vskip1ex
      The function \texttt{print()} doesn't interpret its argument, and simply prints it to standard output and invisibly returns it,
      \vskip1ex
      Typing the name of an object in \texttt{R} implicitly calls \texttt{print()} on that object,
      \vskip1ex
      The function \texttt{save()} writes objects to a binary file,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=2:30>>=
setwd("C:/Develop/data")
cat("Enter\ttab")  # cat() interprets backslash escape sequences
print("Enter\ttab")

my_text <- print("hello")
my_text  # print() returns its argument

# create string
my_text <- "Title: My Text\nSome numbers: 1,2,3,...\nRprofile files contain code executed at R startup,\n"

cat(my_text, file="mytext.txt")  # write to text file

cat("Title: My Text",  # write several lines to text file
    "Some numbers: 1,2,3,...",
    "Rprofile files contain code executed at R startup,", 
    file="mytext.txt", sep="\n")

save(my_text, file="mytext.Rdata")  # write to binary file
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Reading Text from Files}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{scan()} reads text or data from a file and returns it as a vector or a list,
      \vskip1ex
      The function \texttt{readLines()} reads lines of text from a connection (file or console), and returns them as a vector of \texttt{character} strings,
      \vskip1ex
      The function \texttt{readline()} reads a single line from the console, and returns it as a \texttt{character} string,
      \vskip1ex
      The function \texttt{file.show()} reads text or data from a file and displays in editor,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=(-1)>>=
setwd("C:/Develop/data")
# read text from file
scan(file="mytext.txt", what=character(), sep="\n")

# read lines from file
readLines(con="mytext.txt")

# read text from console
in_put <- readline("Enter a number: ")
class(in_put)
# coerce to numeric
in_put <- as.numeric(in_put)

# read text from file and display in editor:
# file.show("mytext.txt")
# file.show("mytext.txt", pager="")
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Reading and Writing Data from \texttt{Text} Files}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The functions \texttt{read.table()} and \texttt{write.table()} read and write data frames from text files,
      \vskip1ex
      \texttt{write.table()} coerces objects to data frames before it writes them,
      \vskip1ex
      \texttt{read.table()} returns a data frame, and coerces non-numeric values to \texttt{factors} (unless the \texttt{stringsAsFactors=FALSE} option is set),
      \vskip1ex
      \texttt{read.table()} and \texttt{write.table()} can be used to read and write matrices from text files, but they have to be coerced back to matrices,
      \vskip1ex
      \texttt{read.table()} and \texttt{write.table()} are inefficient for very large data sets,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=(-(1:3))>>=
data_frame <- data.frame(
              type=c('rose', 'daisy', 'tulip'), 
              color=c('red', 'white', 'yellow'), 
              price=c(1.5, 0.5, 1.0), 
              row.names=c('flower1', 'flower2', 'flower3')
              )  # end data_frame
mat_var <- matrix(sample(1:12), ncol=3, dimnames=list(NULL, c("col1", "col2", "col3")))
rownames(mat_var) <- paste("row", 1:nrow(mat_var), sep="")
# write data frame to text file, and then read it back
write.table(data_frame, file='florist.txt')
data_read <- read.table(file='florist.txt')
data_read  # a data frame

# write matrix to text file, and then read it back
write.table(mat_var, file='matrix.txt')
mat_read <- read.table(file='matrix.txt')
mat_read  # write.table() coerced matrix to data frame
class(mat_read)
# coerce from data frame back to matrix
mat_read <- as.matrix(mat_read)
class(mat_read)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Copying Data Frames Between the \texttt{clipboard} and \texttt{R}}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      Data frames stored in the \texttt{clipboard} can be copied into \texttt{R} using the function \texttt{read.table()},
      \vskip1ex
      Data frames in \texttt{R} can be copied into the \texttt{clipboard} using the function \texttt{write.table()},
      \vskip1ex
      This allows convenient copying of data frames between \texttt{Excel} and \texttt{R},
      \vskip1ex
      Data frames can also be manipulated directly in the \texttt{R} spreadsheet-style data editor,
    \column{0.6\textwidth}
      \vspace{-1em}
        <<echo=(-(1:3)),eval=FALSE>>=
data_frame <- data.frame(small=c(3, 5), medium=c(9, 11), large=c(15, 13))
setwd("C:/Develop/data")
data_frame <- read.table("mydata.txt", header=TRUE)
data_frame <- read.table("clipboard", header=TRUE)

write.table(x=data_frame, file="clipboard", sep="\t")

# wrapper function for copying data frame from clipboard into R
# by default, data is tab delimited, with a header
read_clip <- function(file="clipboard", sep="\t", 
                      header=TRUE, ...) {
  read.table(file=file, sep=sep, header=header, ...)
}  # end read_clip

data_frame <- read_clip()

# wrapper function for copying data frame from R into clipboard
# by default, data is tab delimited, with a header
write.clip <- function(data, row.names=FALSE, 
                       col.names=TRUE, ...) {
  write.table(x=data, file="clipboard", sep="\t", 
              row.names=row.names, col.names=col.names, ...)
}  # end write.clip

write.clip(data=data_frame)

# launch spreadsheet-style data editor
data_frame <- edit(data_frame)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Reading and Writing Data from \texttt{csv} Files}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The functions \texttt{read.csv()} and \texttt{write.csv()} read and write data frames from \texttt{csv} format files,
      \vskip1ex
      These functions are wrappers for \texttt{read.table()} and \texttt{write.table()},
      \vskip1ex
      \texttt{read.csv()} coerces non-numeric values to \texttt{factors} (unless the \texttt{stringsAsFactors=FALSE} option is set),
      \vskip1ex
      \texttt{read.csv()} reads row names as an extra column,
      \vskip1ex
      The \texttt{*.csv()} functions are very inefficient for large data sets,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=TRUE>>=
# write data frame to CSV file, and then read it back
write.csv(data_frame, file='florist.csv')
data_read <- read.csv(file='florist.csv', 
                       stringsAsFactors=FALSE)
data_read  # the rownames are read in as extra column
# restore rownames
rownames(data_read) <- data_read[, 1]
data_read <- data_read[, -1]  # remove extra column
data_read
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Reading and Writing Matrices from \texttt{csv} Files}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      There are several ways of reading and writing matrices from \texttt{csv} files, with tradeoffs between simplicity, data size, and speed,
      \vskip1ex
      The functions \texttt{read.csv()} and \texttt{write.csv()} can read and write matrices from \texttt{csv} format files,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=TRUE>>=
# write matrix to csv file, and then read it back
write.csv(mat_var, file='matrix.csv')
mat_read <- read.csv(file='matrix.csv', 
                     stringsAsFactors=FALSE)
mat_read  # read.csv() read matrix as data frame
class(mat_read)
# restore rownames
rownames(mat_read) <- mat_read[, 1]
mat_read <- mat_read[, -1]  # remove extra column
# coerce from data frame back to matrix
mat_read <- as.matrix(mat_read)
class(mat_read)
mat_read  # a matrix
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Reading and Writing Matrices (cont.)}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{write.matrix()} writes a matrix to a text file, without its rownames,
      \vskip1ex
      \texttt{write.matrix()} is part of package \texttt{MASS},
      \vskip1ex
      The advantage of function \texttt{scan()} is its speed, but it doesn't handle rownames easily,
      \vskip1ex
      Removing rownames simplifies the reading and writing of matrices,
      \vskip1ex
      The function \texttt{readLines} reads whole lines and returns them as single strings,
      \vskip1ex
      The function \texttt{system.time()} measures CPU time spent on executing code,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=TRUE>>=
library('MASS')  # load library 'MASS'
# write to CSV file by row - it's very SLOW!!!
write.matrix(mat_var, file='matrix.csv', sep=',')
system.time(  # scan reads faster - skip first line with colnames
  mat_read <- scan(file='matrix.csv', sep=',', 
                  skip=1, what=numeric()))
col_names <- readLines(con='matrix.csv', n=1)  # read colnames
col_names  # this is a string!
col_names <- strsplit(col_names, s=',')[[1]]  # convert to char vector
mat_read  # mat_read is a vector, not matrix!
# coerce by row to matrix
mat_read <- matrix(mat_read, ncol=length(col_names), 
                  byrow=TRUE)
colnames(mat_read) <- col_names  # restore colnames
mat_read
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Reading Matrices Containing Bad Data}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      Very often when data is read from external sources, it contains fields with bad data,
      \vskip1ex
      Coercion of bad data elements to \texttt{numeric} introduces \texttt{NA} values,
      \vskip1ex
      Additional code is needed to scrub bad data,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<>>=
mat_read <- read.csv(file='badmatrix.csv')
# restore rownames
rownames(mat_read) <- as.character(mat_read[, 1])
mat_read <- mat_read[, -1]  # remove extra column
dim_names <- dimnames(mat_read)  # save dimnames
num_col <- ncol(mat_read)  # save num columns
mat_read  # data frame with bad data
class(mat_read)
class(mat_read[, 1])
class(mat_read[, 2])  # numeric coerced to factor by bad data
# convert non-numeric to NA by coercing to matrix and then to numeric
mat_read <- as.numeric(as.matrix(mat_read))
mat_read  # vector with NAs
mat_read[is.na(mat_read)] <- 0  # overwrite NAs
# coerce from vector back to matrix
mat_read <- matrix(mat_read, ncol=num_col, dimnames=dim_names)
mat_read  # matrix without NAs
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Reading and Writing \texttt{zoo} Time Series Objects}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The functions \texttt{read.zoo()} and \texttt{write.zoo()} read and write \texttt{zoo} objects from \texttt{text} and \texttt{csv} files,
      \vskip1ex
      By default these functions read and write data in \emph{space}-delimited format, so the parameter \texttt{sep=","} must be passed to read and write in \emph{tab}-delimited format,
      \vskip1ex
      These functions are wrappers for \texttt{read.table()} and \texttt{write.table()},
      \vskip1ex
      Very often \texttt{csv} files contain custom date-time formats, which need to be passed as parameters into  \texttt{read.zoo()} for proper formatting,
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=4:30>>=
rm(list=ls())
set.seed(1121)  # initialize the random number generator
library(zoo)  # load package zoo
# create POSIXct index
date_index <- seq(from=as.POSIXct("2013-06-15"), 
                  by="hour", length.out=1000)
# create zoo time series
zoo_series <- zoo(cumsum(rnorm(length(date_index))), 
                  order.by=date_index)
# write zoo to text file, and then read it back
write.zoo(zoo_series, file="zoo_series.txt")
zoo_series <- read.zoo("zoo_series.txt")  # read it back
# write zoo to CSV file, and then read it back
write.zoo(zoo_series, file="zoo_series.csv", sep=",")
zoo_series <- read.zoo(file='zoo_series.csv', 
                  header=TRUE, sep=",", FUN=as.POSIXct)
# read zoo from CSV file, with custom date-time format
zoo_frame <- read.table(file='zoo_series2.csv', sep=",")
tail(zoo_frame, 3)  # date-time format mm/dd/yyyy hh:mm
zoo_series <- read.zoo(file='zoo_series2.csv', 
                  header=TRUE, sep=",", FUN=as.POSIXct, 
                  format="%m/%d/%Y %H:%M")
tail(zoo_series, 3)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\section{\texttt{R} Help and Documentation}


%%%%%%%%%%%%%%%
\subsection{Internal \texttt{R} Help and Documentation}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{help()} displays documentation on a function or subject,\\
      \vskip1ex
      Preceding the keyword with a single \texttt{'?'} is equivalent to calling \texttt{help()},
    \column{0.6\textwidth}
      \vspace{-1em}
% tidy=FALSE prevents translation of '?getwd' into '`?`(getwd)'
      <<eval=FALSE>>=
help(getwd)  # display documentation on function 'getwd'
?getwd  # equivalent to 'help(getwd)'
      @
  \end{columns}
\end{block}
\pause

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{help.start()} displays a page with links to internal documentation,
      \vskip1ex
      \texttt{R} documentation is also available in \texttt{RGui} under the help tab,
      \vskip1ex
      The \texttt{pdf} files with \texttt{R} documentation are also available directly under:\\
%      \texttt{\color{blue}{C:/Program Files/R/R-3.1.0/bin/x64}}\\
      \href{C:/Program Files/R/R-3.1.0/doc/manual/}{C:/Program Files/R/R-3.1.0/doc/manual/}\\
      (the exact path will depend on the \texttt{R} version.)
    \column{0.6\textwidth}
      \vspace{-1em}
      <<eval=FALSE>>=
help.start()  # open the hypertext documentation
      @
      \vskip1ex
      \includegraphics[height=0.2\textwidth]{Rlogo.jpg}
  \end{columns}
\end{block}


\end{frame}


%%%%%%%%%%%%%%%
\subsection{\texttt{R} Online Help and Documentation}
\begin{frame}[t]{\subsecname}
\vspace{-1em}

\begin{block}{\texttt{R} Programming \texttt{Wikibook}}
  \texttt{Wikibooks} are crowdsourced textbooks\\
  \hskip1em\url{http://en.wikibooks.org/wiki/R_Programming/}\\
\end{block}

\begin{block}{\texttt{R FAQ}}
  Frequently Asked Questions about \texttt{R}\\
  \hskip1em\url{http://cran.r-project.org/doc/FAQ/R-FAQ.html}\\
\end{block}

\begin{block}{\texttt{R}-seek Online Search Tool}
  \texttt{R}-seek allows online searches specific to the \texttt{R} language\\
  \hskip1em\url{http://www.rseek.org/}
\end{block}

\begin{block}{\texttt{R}-help Mailing List}
  \texttt{R}-help is a very comprehensive Q\&A mailing list\\
  \hskip1em\url{https://stat.ethz.ch/mailman/listinfo/r-help}\\
  \texttt{R}-help has archives of past Q\&A - search it before you ask\\
  \hskip1em\url{https://stat.ethz.ch/pipermail/r-help/}\\
  GMANE allows searching the \texttt{R}-help archives using a usenet newsgroup style GUI\\
  \hskip1em\url{http://news.gmane.org/gmane.comp.lang.r.general}\\
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Stack Exchange}
\begin{frame}[t]{\subsecname}

\begin{columns}[T]
  \column{0.5\textwidth}
    \begin{block}{Stack Overflow}
      Stack Overflow is a Q\&A forum for computer programming, and is part of Stack Exchange\\
%  Stack Overflow is a Q\&A forum for programmers (covers many different languages)\\
      \hskip1em\url{http://stackoverflow.com}\\
      \hskip1em\url{http://stackoverflow.com/questions/tagged/r}\\
      \hskip1em\url{http://stackoverflow.com/tags/r/info}\\
    \end{block}

    \begin{block}{Stack Exchange}
      Stack Exchange is a family of Q\&A forums in a variety of fields\\
      \hskip1em\url{http://stackexchange.com/}\\
      \hskip1em\url{http://stackexchange.com/sites\#technology}\\
      \hskip1em\url{http://quant.stackexchange.com/}\\
    \end{block}
  \column{0.5\textwidth}
    \includegraphics[height=0.9\textwidth]{stack_exchange2.png}
\end{columns}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{\texttt{RStudio} Support}
\begin{frame}[t]{\subsecname}

\begin{block}{}
\texttt{RStudio} has extensive online help, Q\&A database, and documentation\\
\hskip1em\url{https://support.rstudio.com/hc/en-us}\\
\vskip1ex
\hskip1em\url{https://support.rstudio.com/hc/en-us/sections/200107586-Using-RStudio}\\
\vskip1ex
\hskip1em\url{https://support.rstudio.com/hc/en-us/sections/200148796-Advanced-Topics}\\
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{\texttt{R} Blogs and Experts}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{R-Bloggers}
R-Bloggers is an aggregator of blogs dedicated to \texttt{R}\\
\hskip1em\url{http://www.r-bloggers.com/}\\
Tal Galili is the author of R-Bloggers and has his own excellent blog\\
\hskip1em\url{http://www.r-statistics.com/}\\
\end{block}
\pause

\begin{block}{Dirk Eddelbuettel}
Dirk is a $Top Answerer$ for \texttt{R} questions on Stackoverflow, the author of the \texttt{Rcpp} package, and the CRAN Finance View\\
\hskip1em\url{http://dirk.eddelbuettel.com/}\\
\hskip1em\url{http://dirk.eddelbuettel.com/code/}\\
\hskip1em\url{http://dirk.eddelbuettel.com/blog/}\\
\hskip1em\url{http://www.rinfinance.com/}\\
\end{block}
\pause

\begin{block}{Romain Frangois}
Romain is an \texttt{R} Enthusiast and \texttt{Rcpp} Hero\\
\hskip1em\url{http://romainfrancois.blog.free.fr/}\\
\hskip1em\url{http://romainfrancois.blog.free.fr/index.php?tag/graphgallery}\\
\hskip1em\url{http://blog.r-enthusiasts.com/}\\
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{More \subsecname}

\begin{block}{Revolution Analytics Blog}
\texttt{R} blog by Revolution Analytics software vendor\\
\hskip1em\url{http://blog.revolutionanalytics.com/}\\
\end{block}
\pause

\begin{block}{\texttt{RStudio} Blog}
\texttt{R} blog by \texttt{RStudio}\\
\hskip1em\url{http://blog.rstudio.org/}\\
\end{block}

\end{frame}


\end{document}
