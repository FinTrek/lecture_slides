% FRE6871_Lecture_1

% Define knitr options
% !Rnw weave = knitr
% Set global chunk options
<<knitr_setup,include=FALSE,cache=FALSE>>=
library(knitr)
opts_chunk$set(prompt=TRUE, comment=NA, highlight=FALSE, message=FALSE, warning=FALSE, size='scriptsize', fig.width=4, fig.height=4)
options(width=60, dev='pdf')
thm <- knit_theme$get("acid")
knit_theme$set(thm)
@


% Define document options
\documentclass[10pt]{beamer}
\mode<presentation>
\usetheme{AnnArbor}
% \usecolortheme{whale}
% Uncover everything in a step-wise fashion
% \beamerdefaultoverlayspecification{<+->}
% amsmath package for math symbols
% \usepackage{amsmath}
\usepackage[latin1]{inputenc}
\usepackage{hyperref}
\usepackage{fancybox}
\usepackage{url}
\usepackage[backend=bibtex,style=alphabetic]{biblatex} % bibstyle=numeric
% \bibliographystyle{amsalpha} % doesn't work
\addbibresource{FRE6811_bib.bib}
% \addbibresource[location=remote]{http://www.citeulike.org/user/jerzyp}
\renewcommand\bibfont{\footnotesize}
\renewcommand{\pgfuseimage}[1]{\scalebox{0.75}{\includegraphics{#1}}} % scale bib icons
\setbeamertemplate{bibliography item}[text] % set bib icons
% \setbeamertemplate{bibliography item}{} % remove bib icons

% \usepackage{enumerate}
% \let\emph\textbf
% \let\alert\textbf
% Define colors for hyperlinks
\definecolor{links}{HTML}{2A1B81}
\hypersetup{colorlinks=true,linkcolor=,urlcolor=links}
% Make url text footnotesize
\renewcommand\UrlFont{\footnotesize}
% Make institute text italic and small
\setbeamerfont{institute}{size=\small,shape=\itshape,bg=red,fg=red}
\setbeamerfont{date}{size=\small}
\setbeamerfont{block title}{size=\normalsize} % shape=\itshape
\setbeamerfont{block body}{size=\footnotesize}


% Title page setup
\title[FRE6871 Lecture\#1]{FRE6871 R in Finance}
\subtitle{Lecture\#1, Fall 2014}
% \subject{Getting Started With R}
\institute[NYU Polytechnic]{NYU Polytechnic School of Engineering}
\titlegraphic{\includegraphics[scale=0.8]{engineering_long_color}}
\author[Jerzy Pawlowski]{Jerzy Pawlowski \texorpdfstring{(\textit{\color{blue}{\footnotesize{jp3900@nyu.edu}}})}{}}
% \email{jp3900@poly.edu}
\date{January 27, 2014}
% \date{\today}
% \pgfdeclareimage[height=0.5cm]{university-logo}{engineering_long_white}
% \logo{\pgfuseimage{engineering_long_white}}


%%%%%%%%%%%%%%%
\begin{document}


%%%%%%%%%%%%%%%
\maketitle


%%%%%%%%%%%%%%%
% \begin{frame}[t]{Outline}
% You might wish to add the option [pausesections]
%   \tableofcontents
% \end{frame}


%%%%%%%%%%%%%%%
\section{Introduction}


%%%%%%%%%%%%%%%
\subsection{About FRE6871 R in Finance}
\begin{frame}[t]{\subsecname}

\begin{block}{Course Description}
The course will teach the $R$ statistical language through practical applications to time series analysis, regression, estimation, and forecasting.\\
The aim will be to learn by doing and to learn through examples.
\end{block}
\pause

\begin{block}{Exams}
There will be no exams.
\end{block}
\pause

\begin{block}{Grading}
Grading will be based on homework assignments.
\end{block}
\pause

\begin{block}{Course Prerequisites}
No prior knowledge of the $R$ language is required.  But students should have a familiarity with basic statistics, time series analysis, and with a procedural programming language.
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{FRE6871 Textbook}
\begin{frame}[t]{\subsecname}

\begin{block}{Course Slides}
The course will be mostly self-contained, using detailed course slides.\\
The course will also utilize data and tutorials which are freely available on the internet.
\end{block}
\pause

\begin{block}{Textbook}
  There will be no required textbook, but a recommended textbook is:\\
  \hskip1em\fullcite{rupperttexbook}\\
  Textbook website contains $R$ programs and data sets:\\
  \hskip1em\fullcite{website:ruppert}
% \emph{David Ruppert, Statistics and Data Analysis for Financial Engineering (Springer Texts in Statistics)}
\end{block}
\pause

\begin{block}{Supplementary Textbooks}
  \hskip1em\fullcite{kleibertexbook}\\
  \hskip1em\fullcite{website:kleiber}\\
  \hskip1em\fullcite{isltexbook}\\
  \hskip1em\fullcite{website:isl}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Other Required Course Materials}
\begin{frame}[t]{\subsecname}
\begin{block}{}
  \begin{itemize}[]
    \item Students will be required to install and use the $R$ Interpreter and the $RStudio$ Integrated Development Environment (\emph{IDE}) on their computers,
    \item Students will be required to become proficient with the $RStudio$ IDE,
    \item Students are encouraged to bring their laptop computers to class and run the $R$ Interpreter during the lecture,
  \end{itemize}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\section{Getting Started With $R$}


%%%%%%%%%%%%%%%
\subsection{What is $R$?}
\begin{frame}[t]{\subsecname}

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    \begin{itemize}[]
      \item Is an open-source software environment for statistical computing and graphics,
      \item Is an interpreted language,
      \item Supports object-oriented programming with generic functions,
      \item Capabilities are extended through user-created packages,
      \item Is written in $R$ itself and in $C$/$C++$.
    \end{itemize}
    \hskip1em\url{http://www.r-project.org/}\\
    \hskip1em\url{http://en.wikipedia.org/wiki/R_(programming_language)}\\
%    \hskip1em\url{http://blog.revolutionanalytics.com/2011/08/what-language-is-r-written-in.html}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.2\textwidth]{Rlogo.jpg}
\end{columns}
\end{block}
\pause

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    The $R$ software and its libraries are released under the GNU General Public License\\
    \hskip1em\url{http://www.r-project.org/Licenses}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.2\textwidth]{GPLv3_Logo.png}
\end{columns}
\end{block}
\pause

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    Many other $R$ software are released under the Creative Commons Attribution-ShareAlike License\\
    \hskip1em\url{http://creativecommons.org}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.1\textwidth]{CC_License.png}
\end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Installing $R$ and $RStudio$}
\begin{frame}[t]{\subsecname}

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    Download $R$ Interpreter from $CRAN$ (Comprehensive $R$ Archive Network)\\
    \hskip1em\url{http://cran.us.r-project.org}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.2\textwidth]{Rlogo.jpg}
\end{columns}
\end{block}
\pause

\begin{block}{}
\begin{columns}[T]
  \column{0.7\textwidth}
    Download $RStudio$ IDE (Integrated Development Environment)\\
    \hskip1em\url{http://www.rstudio.com/ide}\\
  \column{0.3\textwidth}
    \includegraphics[height=0.2\textwidth]{RStudio_logo.png}
\end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Using $RStudio$}
\begin{frame}[t]{\subsecname}

% Snapshot of $RStudio$ GUI
\includegraphics[height=0.6\textwidth]{RStudio.png}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{$RStudio$ Support}
\begin{frame}[t]{\subsecname}

\begin{block}{}
$RStudio$ has extensive online help, Q\&A database, and documentation\\
\hskip1em\url{https://support.rstudio.com/hc/en-us}\\
\vskip1ex
\hskip1em\url{https://support.rstudio.com/hc/en-us/sections/200107586-Using-RStudio}\\
\vskip1ex
\hskip1em\url{https://support.rstudio.com/hc/en-us/sections/200148796-Advanced-Topics}\\
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Stack Exchange}
\begin{frame}[t]{\subsecname}

\begin{columns}[T]
  \column{0.5\textwidth}
    \begin{block}{Stack Exchange}
      Stack Exchange is a family of Q\&A forums in a variety of fields\\
      \hskip1em\url{http://stackexchange.com/}\\
      \hskip1em\url{http://stackexchange.com/sites\#technology}\\
      \hskip1em\url{http://quant.stackexchange.com/}\\
    \end{block}
    \begin{block}{Stack Overflow}
      Stack Overflow is a Q\&A forum for computer programming, and is part of Stack Exchange\\
%  Stack Overflow is a Q\&A forum for programmers (covers many different languages)\\
      \hskip1em\url{http://stackoverflow.com}\\
      \hskip1em\url{http://stackoverflow.com/questions/tagged/r}\\
      \hskip1em\url{http://stackoverflow.com/tags/r/info}\\
    \end{block}
  \column{0.5\textwidth}
    \includegraphics[height=0.9\textwidth]{stack_exchange2.png}
\end{columns}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Other $R$ Online Help}
\begin{frame}[t]{\subsecname}

\begin{block}{$R$-help Mailing List}
  $R$-help is a very comprehensive Q\&A mailing list\\
  \hskip1em\url{https://stat.ethz.ch/mailman/listinfo/r-help}\\
  $R$-help has archives of past Q\&A - search it before you ask\\
  \hskip1em\url{https://stat.ethz.ch/pipermail/r-help/}\\
  GMANE allows searching the $R$-help archives using a usenet newsgroup style GUI\\
  \hskip1em\url{http://news.gmane.org/gmane.comp.lang.r.general}\\
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{$R$ Blogs and Experts}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{R-Bloggers}
R-Bloggers is an aggregator of blogs dedicated to $R$\\
\hskip1em\url{http://www.r-bloggers.com/}\\
Tal Galili is the author of R-Bloggers and has his own excellent blog\\
\hskip1em\url{http://www.r-statistics.com/}\\
\end{block}
\pause

\begin{block}{Dirk Eddelbuettel}
Dirk is a $Top Answerer$ for $R$ questions on Stackoverflow, the author of the \texttt{Rcpp} package, and the CRAN Finance View\\
\hskip1em\url{http://dirk.eddelbuettel.com/}\\
\hskip1em\url{http://dirk.eddelbuettel.com/code/}\\
\hskip1em\url{http://dirk.eddelbuettel.com/blog/}\\
\hskip1em\url{http://www.rinfinance.com/}\\
\end{block}
\pause

\begin{block}{Romain François}
Romain is an $R$ Enthusiast and \texttt{Rcpp} Hero\\
\hskip1em\url{http://romainfrancois.blog.free.fr/}\\
\hskip1em\url{http://romainfrancois.blog.free.fr/index.php?tag/graphgallery}\\
\hskip1em\url{http://blog.r-enthusiasts.com/}\\
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{More \subsecname}

\begin{block}{Revolution Analytics Blog}
$R$ blog by Revolution Analytics software vendor\\
\hskip1em\url{http://blog.revolutionanalytics.com/}\\
\end{block}
\pause

\begin{block}{$RStudio$ Blog}
$R$ blog by $RStudio$\\
\hskip1em\url{http://blog.rstudio.org/}\\
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\section{Basic Operations in $R$}


%%%%%%%%%%%%%%%
\subsection{Exploring an $R$ Session}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Get (default) current working directory (cwd)
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
getwd()  # get cwd
      @
  \end{columns}
\end{block}
\pause

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Set working directory
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
setwd("C:/Develop/R/Presentations")  # set cwd
      @
  \end{columns}
\end{block}
\pause

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Get system date and time\\
      \vskip4ex
      Just the date
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
Sys.time()  # returns a character string
format(Sys.time(), "%B-%d-%Y")  # format the string
paste("Today is", Sys.time())  # concatenate strings
paste("Today is", format(Sys.time(), "%B-%d-%Y"))
      @
  \end{columns}
\end{block}
\pause

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Get help on a function
    \column{0.7\textwidth}
      \vspace{-1em}
% tidy=FALSE prevents translation of '?getwd' into '`?`(getwd)'
      <<prompt=FALSE,tidy=FALSE,eval=FALSE,out.width='0.3\textwidth'>>=
?getwd or help(getwd)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Assignment Operators}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      The standard assignment operator in $R$ is \texttt{"<-"},\\
      \vskip1ex
      Both \texttt{"<-"} and \texttt{"="} are valid assignment operators in $R$,\\
      \vskip1ex
      But they differ in \emph{scope} and  \emph{precedence} (\texttt{"<-"} has higher precedence than \texttt{"="}),\\
      \vskip1ex
      The \texttt{"="} operator is used for named arguments in function calls,\\
    \column{0.5\textwidth}
      \vspace{-1em}
      <<>>=
n.var1 <- 3
n.var1
n.var1 = 3
n.var1
      @
  \end{columns}
\end{block}
\pause

\begin{block}{\color{red}{Rule of Thumb}}
  Use \texttt{"<-"} in $R$ scripts,\\
  \vskip1ex
  Use \texttt{"="} in function calls.\\
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{The $R$ Workspace}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The workspace is the current $R$ working environment, which includes all user-defined objects and the command history,\\
      \vskip1ex
      The function \texttt{ls()} returns names of objects in the $R$ workspace,\\
      \vskip1ex
      The function \texttt{rm()} removes objects from the $R$ workspace,\\
      \vskip1ex
      The workspace can be saved into and loaded back from an $*.RData$ file (binary file format),\\
      \vskip1ex
      The function \texttt{save.image()} saves the whole workspace,\\
      \vskip1ex
      The function \texttt{save()} saves just the selected objects,\\
    \column{0.6\textwidth}
      \vspace{-1em}
      <<tidy=FALSE>>=
n.var1 <- 3  # define new object
ls()  # list objects
save.image()  # save workspace to file .RData in cwd
rm(n.var1)  # remove object
ls()  # list objects
load(".RData")
ls()  # list objects
n.var2 <- 5  # define another object
save(n.var1, n.var2,  # save selected objects
     file="C:/jerzy/temp/my_data.RData")
rm(n.var1, n.var2)  # remove objects
ls()  # list objects
load(file="C:/jerzy/temp/my_data.RData")
ls()  # list objects
      @
  \end{columns}
\end{block}
% \pause

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{\subsecname \hskip0.5em (cont.)}

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      When you quit $R$ you'll be prompted "Save workspace image?"\\
      \vskip1ex
      If you answer $YES$ then the workspace will be saved into the $.RData$ file in the $cwd$,\\
      \vskip1ex
      When you start $R$ again, the workspace will be automatically loaded from the existing $.RData$ file,\\
    \column{0.6\textwidth}
      \vspace{-1em}
      <<eval=FALSE>>=
q()  # quit R session
      @
  \end{columns}
\end{block}
\pause

\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The function \texttt{history()} displays recent commands,\\
      \vskip1ex
      You can also save and load the command history from a file,\\
    \column{0.6\textwidth}
      \vspace{-1em}
      <<eval=FALSE>>=
history(5)  # display last 5 commands
savehistory(file="myfile")  # default is ".Rhistory" 
loadhistory(file="myfile")  # default is ".Rhistory"
      @
  \end{columns}
\end{block}
% \pause

\end{frame}


%%%%%%%%%%%%%%%
\section{Data Structures}


%%%%%%%%%%%%%%%
\subsection{\secname\hskip0.5em in $R$}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      Homogeneous data structures contain objects of the same class,\\
      \vskip1ex
      Heterogeneous structures can contain objects of different classes,\\
    \column{0.5\textwidth}
%      \vspace{-1em}
      \renewcommand\arraystretch{1.5} % scale table rows
      \renewcommand\tabcolsep{8pt} % set table column width - 6pt is default
      \centering{{\color{blue}{$R$ Data Structures}}}\\[1ex]
      \begin{tabular}{c||c|c|}
        & \text{Homogeneous} & \text{Heterogeneous} \\
        \hline
        \hline
        \text{1-dim} & Vectors & Lists \\
        \hline
        \text{2-dim} & Matrices & Data frames \\
        \hline
        \text{n-dim} & Arrays & NA \\
      \end{tabular}
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Character Strings}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Strings are character objects of length one,\\
      \vskip1ex
      The function \texttt{paste()} converts elements to characters and concatenates them into a string,\\
      \vskip1ex
      The function \texttt{cat()} concatenates strings and writes to output,\\
      \vskip1ex
      The function \texttt{grep()} searches for matches of a pattern in a string,\\
      \vskip1ex
      The function \texttt{gsub()} replaces all matches of a pattern in a string,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
s.var1 <- "Hello"  # define a character string
s.var2 <- "World!"  # define a character string
paste(s.var1, s.var2, sep=' ')  # concatenate
paste('a', 1:4, sep='-')  # convert, recycle and concatenate
cat(s.var1, s.var2)  # concatenate and write to output
strsplit("Hello World", split='r')  # split string
grep("a+", c("abc", "def", "cba a", "aa"), value=TRUE)
gsub("is", "XX", "is this gratis?")
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Vectors}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      The function \texttt{c()} combines values into a vector or a list,\\
      \vskip1ex
      Vectors can be indexed (subset) using vectors of:
      \begin{itemize}[]
        \item positive integers,
        \item negative integers,
        \item characters,
        \item logical vectors,
      \end{itemize}
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
v.var <- c(pi, exp(1), -digamma(1))  # define a vector
v.var
v.var[2]  # get second element
v.var[-2]  # get all elements, except the second element
v.var[c(F, T, T)]  # get second and third elements
v.var == v.var[2]  # logical vector of elements equal to the second one
v.var < 1  # logical vector of elements less than one
v.var[v.var > 1]  # get all elements greater than one
      @
  \end{columns}
\end{block}
\pause

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Vectors can be multiplied and squared element by element,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<echo=2:20>>=
v.var <- c(pi, exp(1), -digamma(1))
v.var
2*v.var  # multiply all elements by 2
v.var^2  # square all elements
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{\subsecname \hskip0.5em (cont.)}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Vector elements can be assigned $names$,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
v.var <- c(pi=pi, euler=exp(1), gamma=-digamma(1))
v.var
names(v.var)  # get names of elements
v.var['euler']  # get element named 'euler'
names(v.var) <- c("pie","eulery","gammy")  # rename elements
v.var
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{\subsecname\hskip0.5em of Numbers}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      The function \texttt{seq()} returns a vector of numbers,\\
      \vskip1ex
      Another way of producing a vector of numbers is by using the "\texttt{:}" operator,\\
      \vskip1ex
      \texttt{letters} is a constant and a vector,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
seq(from=0, to=1, len=11)  # vector of decimals from 0 to 1.0
seq(from=0, to=1, by=0.1)  # vector of decimals from 0 to 1.0
0:10  # vector of integers from 0 to 10
(0:10)/10  # vector of decimals from 0 to 1.0
letters[5:10]  # vector of letters
      @
  \end{columns}
\end{block}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Appending vectors,\\
      \vskip1ex
      The function \texttt{vector()} returns an empty vector,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
c(11, 5:10)  # append to vector
c(20:25, 5:10)  # append to vector
v.var <- vector()  # create empty vector
v.var <- vector("numeric",  # create numeric vector of zeros
                length=10)
c(v.var, 2.0)  # append to vector
c('a', letters[5:10])  # vector of letters
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Lists}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Lists are a type of vector that contain elements of different classes,\\
      \vskip1ex
      Lists are recursive object types,\\
      \vskip1ex
      Lists can be indexed (subset) using:
      \begin{itemize}[]
        \item the '\texttt{[[}' operator,
        \item the '\texttt{\$}' operator (for named lists only),
      \end{itemize}
      \vskip1ex
      Partial name matching allows subsetting with partial name, as long as it can be resolved, 
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
l.var <- list(c('a', 'b'), 1:4)  # create a list
l.var
typeof(l.var)
l.var[[2]]  # get second element
l.var[[2]][3]  # get third element of second element
l.var[[c(2, 3)]]  # get third element of second element
l.var <- list(first=c('a', 'b'),  # create named list
              second=1:4)
names(l.var)
l.var$second  # get second element
l.var$s  # get second element - partial name matching
l.var$second[3]  # get third element of second element
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{$R$ Object Attributes}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      $R$ objects can have the following attributes:
      \begin{itemize}[]
        \item length,
        \item names,
        \item dimnames,
        \item dimensions,
        \item class,
        \item Other user-defined attributes/metadata,
      \end{itemize}
      \vskip1ex
      The function \texttt{attributes()} returns the attributes of an object,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
attributes(5:10)  # a simple vector has no attributes
v.var <- c(pi=pi, euler=exp(1), gamma=-digamma(1))
attributes(v.var)  # a named vector has 'names' attribute
class(attributes(v.var))  # the attribute is a list object 
length(v.var)
is.vector(v.var)  # is the object a vector?
is.vector(names(v.var))  # names are character vectors
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Type and Class of Objects}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      The \texttt{type} of an  $R$ object represents how it's stored in memory,\\
      Examples of $R$ \texttt{types} are \texttt{integer}, \texttt{double}, \texttt{character}, \texttt{list}, etc.\\
      \vskip1ex
      The \texttt{class} of an  $R$ object is an attribute used for function dispatching in S3 classes,\\
      Examples of $R$ \texttt{classes} are \texttt{character}, \texttt{numeric}, \texttt{matrix}, \texttt{factor}, \texttt{data.frame}, etc.\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
v.var <- c(pi=pi, euler=exp(1), gamma=-digamma(1))
typeof(v.var)  # get object type
class(v.var)  # get object class
typeof(names(v.var))
class(names(v.var))
v.var <- c(1:5, 'a')  # append to vector
v.var  # type coercion
class(v.var)  # get object class
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Type Coercion}
\begin{frame}[fragile,t]{\subsecname}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      When different objects are mixed in a vector, implicit coercion occurs so that every element in the vector is of the same class,\\
      \vskip1ex
      The rule is that coercion is into larger types (numeric values are coerced into character strings),\\
      \vskip1ex
      Objects can be explicitly coerced from one class to another using the \texttt{as.*} functions,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
c(1:3, 'a')  # implicit coercion
as.numeric(c(1:3, 'a'))  # explicit coercion
as.logical(0:3)
as.character(0:3)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Arrays and Matrices}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Arrays are vectors with a dimension attribute,\\
      \vskip1ex
      Matrices are two-dimensional arrays,\\
      \vskip1ex
      The dimension attribute of a matrix is an integer vector of length 2 (nrow, ncol),\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
m.var <- matrix(1:6, nrow=2, ncol=3)  # create a matrix
m.var  # by default matrices are constructed column-wise
class(m.var)  # matrix class
dim(m.var)  # get dimension attribute
rownames(m.var) <- c("row1", "row2")  # set the rownames attribute
colnames(m.var) <- c("col1", "col2", "col3")  # set the colnames attribute
m.var
names(m.var)  # get the names attribute
dimnames(m.var)  # get dimnames attribute
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{\subsecname \hskip0.5em (cont.)}

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Vectors can be converted into matrices by adding a dimension attribute,\\
      \vskip1ex
      The attribute \texttt{dimnames} can be assigned a named list to convert into a named matrix,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<tidy=FALSE>>=
m.var <- 1:6  # create a vector
dim(m.var) <- c(2, 3)  # convert into matrix by adding dimension attribute
dimnames(m.var) <- list('rows'=c('row1', 'row2'),  # set dimnames attribute
                        'columns'=c('col1', 'col2', 'col3'))
m.var
      @
  \end{columns}
\end{block}
\pause

\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Indexing (subsetting) matrices,\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<echo=2:20>>=
m.var <- matrix(1:6, nrow=2, ncol=3)  # create a matrix
m.var
m.var[2, ]  # get second row
m.var[c(1,2), ]  # get first and second rows
m.var[ ,3]  # get third column
m.var[ ,-2]  # remove second column
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Binding Vectors and Matrices Together}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Vectors can be bound into matrices using the functions \texttt{cbind()} and \texttt{rbind()},\\
      \vskip1ex
      The \alert{recycling rule} allows operations on vectors of different lengths:\\
      \begin{enumerate}
        \item Vectors are scanned from left to right,
        \item Shorter vectors are extended in length by recycling their values until they match the length of longer vectors,
      \end{enumerate}
    \column{0.7\textwidth}
      \vspace{-1em}
      <<>>=
v.var1 <- c(1, 2, 3)
v.var2 <- c(4, 5, 6)
cbind(v.var1, v.var2)  # bind into columns
rbind(v.var1, v.var2)  # bind into rows
v.var2 <- c(4, 5, 6, 7)  # extend second vector to four elements
cbind(v.var1, v.var2)  # recycling rule applied
1:6 + c(10, 20)  # another example of recycling rule
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Factors}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.3\textwidth}
      Factors are vectors whose elements can have only certain values,\\
      \vskip1ex
      Factors are designed to describe categorical data which can only take certain values,\\
      \vskip1ex
      The function \texttt{factor()} converts a character vector into a factor,\\
      \vskip1ex
      Factors have two attributes: \texttt{class} ("\texttt{factor}") and \texttt{levels} (the allowed values),\\
    \column{0.7\textwidth}
      \vspace{-1em}
      <<tidy=FALSE>>=
f.var <- factor(c('b', 'c',  # create factor vector
                'd', 'a', 'c', 'b'))
class(f.var)  # get object class
levels(f.var)  # get allowed values
table(f.var)  # get contingency (frequency) table
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\section{Time Series Data}


%%%%%%%%%%%%%%%
\subsection{Time Series Objects}
\begin{frame}[fragile,t]{\subsecname}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      The function \texttt{ts()} creates time-series objects,\\
      \vskip1ex
      \texttt{stats} is a base package and contains functions for statistical calculations and random number generation,\\

        <<rand_ts,eval=TRUE,tidy=FALSE,fig.show='hide'>>=
set.seed(1121)  # for reproducibility
n.var <- 100
# create monthly time series starting 1990
ts.var <- ts(data=cumsum(rnorm(n.var)), 
             frequency=12, start=c(1990, 1))
class(ts.var)  # class 'ts'
# set plot paramaters - margins and font scale
par(oma=c(1, 1, 1, 1))  # set outer margins
par(mgp=c(2, 1, 0))  # set axis title and labels
par(mar=c(5, 1, 1, 1))  # set plot margins
par(cex.lab=0.8,  # set font scales
    cex.axis=0.8, cex.main=0.8, cex.sub=0.5)
plot(ts.var, type="l",  # perform plot
     col="red", lty="solid", xlab="", ylab="")
title(main="Random Prices", line=-1)  # add title
# window the time series
ts.new <- window(ts.var, start=1992, end=1997)
      @

    \column{0.5\textwidth}
      \vspace{-2em}
      \includegraphics[width=0.5\paperwidth,valign=t]{figure/rand_ts}
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{EuStockMarkets}
\begin{frame}[fragile,t]{\subsecname \hskip0.5em Data}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      $R$ includes a number of 'base' packages that are already installed and loaded,\\
      \vskip1ex
      \texttt{datasets} is a base package containing various datasets, for example \texttt{EuStockMarkets},\\
      \vskip1ex
      The \texttt{EuStockMarkets} dataset contains daily closing prices of european stock indices,\\

        <<eustx_ts,echo=2:30,eval=TRUE,tidy=FALSE,fig.show='hide'>>=
par(oma=c(1, 1, 1, 1), mgp=c(2, 1, 0), mar=c(5, 1, 1, 1), cex.lab=0.8, cex.axis=1.0, cex.main=0.8, cex.sub=0.5)
class(EuStockMarkets)  # multiple ts object
dim(EuStockMarkets)
head(EuStockMarkets)  # get first six rows
plot(EuStockMarkets, main="", xlab="")  # plot all the columns
title(main="EuStockMarkets", line=-1)  # add title
      @

    \column{0.5\textwidth}
      \vspace{-2em}
      \includegraphics[width=0.5\paperwidth,valign=t]{figure/eustx_ts}
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{\subsecname \hskip0.5em Returns}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      The function \texttt{hist()} calculates and plots a histogram,\\
      The parameter \texttt{breaks} is the number of cells of the histogram,\\
      \vskip1ex
      The function \texttt{density()} calculates a kernel estimate of the probability density,\\
      \vskip1ex
      The function \texttt{lines()} draws a line through specified points,\\

        <<eustx_rets,echo=2:30,eval=TRUE,tidy=FALSE,fig.show='hide'>>=
par(oma=c(1, 1, 1, 1), mgp=c(2, 1, 0), mar=c(5, 1, 1, 1), cex.lab=0.8, cex.axis=0.8, cex.main=0.8, cex.sub=0.5)
# calculate percentage returns
ts.rets <- diff(log(EuStockMarkets))
# calculate mean and standard deviation of returns
c(mean(ts.rets[, 1]), sd(ts.rets[, 1]))
# plot histogram
hist(ts.rets[, 1], breaks=30, main="", xlim=c(-0.04, 0.04), 
     ylim=c(0, 60), xlab="", ylab="", freq = FALSE)
lines(density(ts.rets[, 1]),  # draw a line
      col='red', lwd=2)
ch.title <- paste(colnames(EuStockMarkets)[1], 'returns')
title(main=ch.title, line=-1)  # add title
      @

    \column{0.5\textwidth}
      \vspace{-2em}
      \includegraphics[width=0.5\paperwidth,valign=t]{figure/eustx_rets}
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\begin{frame}[fragile,t]{\subsecname \hskip0.5em Quantile-Quantile Plot}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      A $Q-Q$ plot is a plot of points from two probability distributions with the same quantiles,\\
      \vskip1ex
      The function \texttt{qqnorm()} produces a normal Q-Q plot,\\
      \vskip1ex
      The function \texttt{qqline()} fits a line to the normal quantiles,\\
      \vskip1ex
      The $DAX$ Q-Q plot shows that the $DAX$ return distribution has fat tails,\\

        <<eustx_qq,echo=4:30,eval=TRUE,tidy=FALSE,fig.show='hide'>>=
par(oma=c(1, 1, 1, 1), mgp=c(2, 1, 0), mar=c(5, 1, 1, 1), cex.lab=0.8, cex.axis=0.8, cex.main=0.8, cex.sub=0.5)
# calculate percentage returns
ts.rets <- diff(log(EuStockMarkets))
# create normal Q-Q plot
qqnorm(ts.rets[, 1], ylim=c(-0.04, 0.04), 
       xlab='Normal Quantiles', main='')
# fit a line to the normal quantiles
qqline(ts.rets[, 1], col='red', lwd=2)
ch.title <- paste(colnames(EuStockMarkets)[1], 
                  'Q-Q Plot')
title(main=ch.title, line=-1)  # add title
shapiro.test(ts.rets[, 1])  # Shapiro-Wilk test
      @

    \column{0.5\textwidth}
      \vspace{-2em}
      \includegraphics[width=0.5\paperwidth,valign=t]{figure/eustx_qq}
      \vskip1ex
      The p-value of the $Shapiro-Wilk$ test is very small, which shows that the $DAX$ returns are not normal,\\
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Homework Assignment}
\begin{frame}[t]{\subsecname}

\begin{block}{Required}
  \begin{itemize}[]
    \item Install the $R$ Interpreter and $RStudio$,
    \item Write R code that performs the following:
    \begin{itemize}[]
      \item create matrix of 30rows x 10columns with random normal variates,
      \item calculate the mean and standard deviation of: the 5th row, the 8th column,
      \item find all elements that are greater than 2.0,
      \item plot the FTSE time series from EuStockMarkets data,
      \item calculate the percentage FTSE returns, and their mean and standard deviation,
      \item create normal Q-Q plot,
      \item apply the Shapiro-Wilk test, what is the p-value?
    \end{itemize}
  \end{itemize}
\end{block}
\pause

\begin{block}{Recommended}
  \begin{itemize}[]
    \item Read chapters 1-3: \fullcite{website:rintro}
    \item Read chapters 1-3: \citetitle{rupperttexbook}
    \item Read: \fullcite{website:googlestyler}
  \end{itemize}
\end{block}

\end{frame}


\end{document}
