meet with C++ guy to coordinate

update syllabus and show to Barry

use combination of take-home homeworks and also online tests in class

online tests in class should be say 20min and should test basic syntax skills

incorporate:
Shalizi Advanced Data Analysis book

# Online Homework Delivery Systems
http://sourceforge.net/projects/openwebwork/
http://www.nsta.org/publications/news/story.aspx?id=51970

# R features
setting up .RProfile file
customizations
aperm
Relational Operators

# plotting
functions: plot, line, points


### data structures

# data frames
Working with data frames
http://en.wikibooks.org/wiki/R_Programming/Working_with_data_frames

sort
order()
with()

which()

drop=FALSE

# input/output

R data formats: RData, Rda, Rds etc
http://stackoverflow.com/questions/21370132/r-data-formats-rdata-rda-rds-etc

reading
read.csv()
read.table()

writing
write()
write.csv()

Package ‘xlsx’
read.xls from the gdata package
In RStudio go to Workspace/Import Dataset
runs read.csv() for you
recycling rule


# plyr


# dplyr 0.2
http://blog.rstudio.org/2014/05/21/dplyr-0-2/


### Date and Time
date and time conversion
Posix
UTC TZ
http://www.noamross.net/blog/2014/2/10/using-times-and-dates-in-r---presentation-code.html

###

show option_example.R

ROC curve
Precision Recall Curve (PR Curve)

###
FRE6811_Lecture_1

calculate percentage returns for stock index
create and plot histogram of returns
calculate and plot the probability kernel density
apply Shapiro-Wilk test

class

storage mode
typeof
type coercion

dim, length

cbind() and rbind()

Subsetting

http://adv-r.had.co.nz/Subsetting.html

head, tail
first, last


###
FRE6811_Lecture_2

create frame with plots of different probability distributions: uniform, normal, Chi2, t, F
probability distributions
distributions of returns

random
create frame with random number generation
create frame with simple applications of: dnorm, pnorm, qnorm, rnorm
set.seed()
random numbers
random vectors

create frame with moments estimator
sample mean, variance, skewness, kurtosis


Some packages includes lots of datasets.
The datasets package
Title Data sets for econometrics
Garch Daily Observations on Exchange Rates of the US Dollar Against Other Currencies
The AER package includes replication datasets for some important textbooks in econometrics.
The EcDat package includes replication archive for the Journal of Applied Econometrics, the Journal of Business and Economic Statistics, etc

Yule 1899 data


### loading packages

# installing packages from github
install.packages("devtools")
devtools::install_github("hadley/tidyr")

CRAN Views

Estimate moments using package moments


### environments
new.env()
enclosing parent environment.
An environment is very similar to a list, with three important exceptions:
Environments have parents. 
There is only one exception: the empty environment does not have a parent.

The parent environment of a function is the environment in which a function was defined

the top-level environment is the global environment (workspace) or the namespace of a package

first-class environments can be manipulated from within the language

parent frame: the latter (returned by parent.frame) refers to the environment of the caller of a function.
parent frame is the calling environment


# Functions
Components of a function
function calls
parameter passing rules: use example built-in function to explain

default argument values
Partial name matching
function lazy evaluation
for example paste() save() or seq()
typing function name without parentheses producs code for that function

introduce functions
Biostatistics 140.776
write a simple function
http://adv-r.had.co.nz/Functions.html

Function for calculating moments

# Create functions
http://adv-r.had.co.nz/Functions.html
http://ww2.coastal.edu/kingw/statistics/R-tutorials/functions.html


### Scope

create separate slide for Lexical Scoping
Environments are the data structures that power scoping
Lexical vs. Dynamic Scoping
Explain Lexical Scoping on example
If an object is not found in an environment, then R will look at its parent (and so on). 

When a function is evaluated, $R$ looks in the function search path for any variables in scope,
\vskip1ex
The evaluation environment is first, then the functions enclosing environment, which will be the global environment for functions defined in the workspace.
\vskip1ex
When R looks up the value for a symbol the frame is examined and if a matching symbol is found its value will be returned. If not, the enclosing environment is then accessed and the process repeated. 
\vskip1ex

global variables can be referenced inside a function.


###
FRE6811_Lecture_3

# super-assignment operator
permanent assignments are intended within a function, then either the
“superassignment” operator, <<- or the function assign() can be used.
global assignment operator: <<-
assignment operator for enclosing environment <<-


# Control statements

http://en.wikibooks.org/wiki/R_Programming/Control_Structures

Venables:
R has available a conditional construction of the form
> if (expr_1) expr_2 else expr_3
where expr 1 must evaluate to a single logical value

vectorized version of the if/else construct, the ifelse function
	ifelse(condition, a, b)
returns a vector of the length of its longest argument,
with elements a[i] if condition[i] is true, otherwise b[i].


# for loops
for (n.inp in v.inp)

# while loops for simulation

with()
with(PlantGrowth, tapply(weight, group, sem))


from:
http://adv-r.had.co.nz/Functions.html
x <- list(1:3, 4:9, 10:12)
sapply(x, "[", 2)
#> [1]  2  5 11

# equivalent to
sapply(x, function(x) x[2])
#> [1]  2  5 11


# Functions

# Recursive functions
# R supports recursive functions. The function below computes Fibonacci numbers recursively.

# Functions in R are “first class objects”
which means that they can be treated much like any other R object. 
Functions can be passed as arguments to other functions
Functions can be nested, so that you can define a function inside of another function
Functions can return functions as their result

Functions as Objects - Functions returning functions
Functions that return another function as its value
functions defined inside other functions

# anonymous functions
(function(x) x + 3)(10)
apply() with anonymous functions
anonymous functions as arguments to functions

formulas as arguments to functions


Explain on examples why defining functions inside other functions is useful in analysis

# Function factories
Closures are useful for making function factories, and are one way to manage mutable state in R.

function environments disappear once the function finishes executing, but when a function returns a function, then its environment is attached to the new function. 

# mutable states
mutable states can be modified using the "superassignment" operator "<<-" or the function assign()

the function assign() assigns a value to a name in an environment
the default is to assign in the enclosing environment


mutable states
http://homepage.stat.uiowa.edu/~luke/R/references.html
mutatr: Mutable objects for R
# Avoid mutable state!!!
http://programmers.stackexchange.com/questions/148108/why-is-global-state-so-evil


# Condition Handling and Recovery
Exception Handling in R
Exception 

      $R$ has a system for handling conditions, that includes the \emph{condition} class and several functions for handling conditions,
      \vskip1ex
      In \emph{RStudio}

Conditions: Errors and Warnings

Warnings are much more common than Errors

Errors are uncommon

Errors occur when: matching arguments, if/else statement not logical or a numeric, recycle rule

Error options
There are a number of options variables that can be used to control how R handles errors and warnings. The are listed in the table below.

‘warn’
Controls the printing of warnings.

‘warning.expression’
Sets an expression that is to be evaluated when a warning occurs. The normal printing of warnings is suppressed if this option is set.

‘error’
Installs an expression that will be evaluated when an error occurs. The normal printing of error messages and warning messages precedes the evaluation of the expression.


warnings can be created using the function warning()
takes a single argument that is a character string

the option "warn" 
The behaviour of a call to warning depends on the value of 


http://homepage.stat.uiowa.edu/~luke/R/exceptions/simplecond.html
http://stackoverflow.com/questions/12193779/how-to-write-trycatch-in-r
http://mazamascience.com/WorkingWithData/?p=912
http://www.stats.uwo.ca/faculty/murdoch/software/debuggingR/
http://www.win-vector.com/blog/2012/10/error-handling-in-r/

function error and warning handling
function exception handling
try()
tryCatch()
get()

options(error=recover)
http://www.burns-stat.com/the-options-mechanism-in-r/


http://homepage.stat.uiowa.edu/~luke/R/exceptions/simplecond.html

http://www.win-vector.com/blog/2012/10/error-handling-in-r/

http://www.stats.uwo.ca/faculty/murdoch/software/debuggingR/


# Try an Expression Allowing Error Recovery
http://stat.ethz.ch/R-manual/R-devel/library/base/html/try.html

command execution time
system.time()

# apply functions
apply

Higher-order functions - apply functions
takes one or more functions as an input - outputs a function
The map function is an example of a higher-order function.
The apply function is the most basic of R's map functions. 
apply takes as arguments an array, a vector of the dimension to map along and a function. 


###
FRE6811_Lecture_4

# Using apply, sapply, lapply in R
http://petewerner.blogspot.com/2012/12/using-apply-sapply-lapply-in-r.html

### time series
Aggregation of time series data over window: mean, median, hi, low, close
package zoo
package xts
package forecast
http://www.statmethods.net/advstats/timeseries.html


### Data scrubbing

NaN represents an undefined value (“not a number”)
producing NaN
managing NaN
NA or NaN
is.na()
is.nan()

Remove NAs option
na.rm = TRUE


###
FRE6811_Lecture_5

# Data Munging

ts.data <- read.csv("data.csv", stringsAsFactors=FALSE)

# package zoo
time()
difftime()
coredata()
lag()
diff()
window()
rollapply()
rollmean()
?rollapply examples


join operations
merge()

cbind merge() two zoo series with different indices
detect missing dates
Apply Various strategies for dealing with NAs: 
remove - na.omit()
linear interpolation, 
last observation carried forward - na.locf()

# create series of dates
daily, monthly, quarterly, yearly series
Class: “yearqtr”, “yearmon”
as.yearmon
yearmon
yearqtr

create function to create EOM, EOQ, EOY dates

remove duplicate dates
http://stackoverflow.com/questions/8865257/r-language-remove-duplicate-rows-from-xts-object

aggregate

get calendar using RQuantLib
calculate business days

allign calendars


# Create frame summarizing Time series: Implementations:

“ts” (base): regular “numeric” time index (e.g., annual, quarterly, monthly),
“its” (its): irregular time index of class “POSIXct”,
“irts” (tseries): irregular time index of class “POSIXct”,
“timeSeries” (timeSeries): irregular time index of class “timeDate”,
“zoo” (zoo): regular or irregular time index of arbitrary class.
“xts” (xts): built on top of “zoo”, with specialized infrastructure for
time indexes of class “Date”, “POSIXct”, “chron”, “timeDate”,
“yearmon”, “yearqtr”, . . .


# duplicate data

unique(mydat) # keep unique rows
library(cwhmisc)
remove.dup.rows(mydat) # similar to unique()
table(duplicated(mydat)) # table duplicated lines
mydat$dups <- duplicated(mydat) # add a logical variable for duplicates


# Classes, generic functions and object orientation

method dispatch

Primitive functions

repeat Lexical scoping

Name masking

Functions vs. variables

binding function calls


###
FRE6811_Lecture_6

create frame explaining hypothesis testing

Shapiro-Wilk test
Jarque Bera test

ACF
PACF



Type I and Type II errors, 

# Homework Assignment
# zoo object helper function
create a function that performs the following:
input is zoo object 
output is summary statistics


###
FRE6811_Lecture_7

Time Series models

slides:
introduce differencing: acf and pacf before and after differencing
example of time series with non-zero autocorrelation
### Autocorrelation tests
### Ljung-Box to test for autocorrelations different from zero

introduce AR model
introduce MA model
introduce ARIMA model

Identification of Autoregressive Processes

Is this true?
For purely deterministic processes, the non-zero PACF coefficients are equal to the correlation coefficients of the \emph{AR}(n) process,

Fitting Time Series models
show that DAX can't fit neither AR nor MA
fit DAX into ARIMA
fit diff DAX into ARIMA

fit using ar()
auto.arima()
arima()
Arima()
spec.ar(ts.retsPair,log='no')
spec.pgram(ts.retsPair,log='no')

fitted(arima.pc1), order.by=index(ts.pca))


### regression

Formulas object
Relationships among variables can be specified. 
The ~ operator is basic to formulas in R.
y ~ x means “y is explained by x”.
f.obj <- y ~ x
class(f)

R2 is a statistic that will give some information about the goodness of fit of a model.
Adjusted R2 is a modification of R2 that adjusts for the number of explanatory terms in a model.

correlation and regression
http://ww2.coastal.edu/kingw/statistics/R-tutorials/simplelinear.html

test residuals

### Durbin-Watson test for first order autocorrelations of regression residuals
Durbin-Watson test for first order autocorrelations of regression residuals

Regression Diagnostic: Rnews_2002-3



###################################
###	EXTRA TOPICS		###
###################################


# Scripts

# Turn PDF writer off
dev.off()

writing output to pdf file
pdf()
sink()
dev.off()

# Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.
png()
dev.off()


create a function:
in sapply loop load data from a file 
scrub it
write to file 
use tryCatch()



### Fitting Market Returns

Fit EuStockMarkets DAX returns into t-dist by using Method of Moments:
matching sample moments with distribution moments
# Fitting Market Returns
http://blog.revolutionanalytics.com/2014/02/quantitative-finance-applications-in-r-4-using-the-generalized-lambda-distribution-to-simulate-market-returns.html


Goodness of fit using the chi-squared statistic
http://en.wikipedia.org/wiki/Goodness_of_fit
use chisq.test()
http://ww2.coastal.edu/kingw/statistics/R-tutorials/prob.html
t.test( )
Wilcoxin test
wilcox.test()
http://ww2.coastal.edu/kingw/statistics/R-tutorials/singlesample.html
http://ww2.coastal.edu/kingw/statistics/R-tutorials/independent-t.html

illustrate multinomial distribution goodness of fit test
http://www.r-tutor.com/elementary-statistics/goodness-fit/multinomial-goodness-fit
http://ww2.coastal.edu/kingw/statistics/R-tutorials/independent-t.html

illustrate Hypothesis Testing using Jarque–Bera test

apply Shapiro-Wilk test

fit EuStockMarkets DAX returns into normal-dist - find p-value
fit EuStockMarkets DAX returns into t-dist - find p-value

create frame with max likelihood
illustrate max likelihood with simulated data

# Optimization

Example from Biostatistics functions
C:\Research\R\Tutorials\Johns Hopkins Biostatistics
Application: Optimization
use example from functions.pdf from Johns Hopkins Biostatistics
for Plotting the Likelihood
No need to carry around long argument lists

create frame with Fisher information


# fit normal distribution
library(MASS)  # library MASS has fitdistr
fitdistr(ts.rets, "normal")  # fit normal distribution
# fit t-distribution into histogram of returns
fitdistr(ts.rets, "t")  # fit t-distribution


# Customizing Startup

http://www.statmethods.net/interface/customizing.html


# Homework Assignment
# create a function that performs the following:
input is a vector with possible NA values
output named vector of length two, with first value being total number of elements of input vector 
with possible NA values
if input is not a vector, then function returns a warning message
output named vector of length two, with first value being total number of elements of input vector 
counts NAs as data values and doesn't tell you

# Homework Assignment
# create a function that performs the following:
reads a matrix from a file
restores rownames (if needed)
you can call functions read.csv() or scan()


# Options Settings
https://stat.ethz.ch/R-manual/R-devel/library/base/html/options.html

# R function debugging

debug()
browser()
stopifnot()

Return values
return()
side-effects
copy-on-modify semantics

do.call()
getOption()

UseMethod()

match.fun()
call a function 'func'
call_fun <- function(func, ...) func(...)

# lists of functions
http://adv-r.had.co.nz/Functional-programming.html

lapply(compute_mean, function(f) system.time(f(x)))


# Infix functions
prefix operators

# Defining new binary operators
"%!%" <- function(X, y) { ... }

The function could then be used as X %!% y.


# functions that have functions as arguments


Replacement function replace() - not sure it's important
http://stackoverflow.com/questions/11563154/what-are-replacement-functions-in-r
http://stackoverflow.com/questions/11811027/replace-function-examples


create frame illustrating deleting objects
rm()
rm(list=ls())

package ggplot
http://www.statmethods.net/advgraphs/ggplot2.html


classification test Sensitivity and specificity
http://en.wikipedia.org/wiki/Sensitivity_and_specificity
http://en.wikipedia.org/wiki/Receiver_operating_characteristic
confusion matrix

