% Define knitr options
% !Rnw weave=knitr
% Set global chunk options
<<knitr_setup,include=FALSE,cache=FALSE>>=
  library(knitr)
opts_chunk$set(prompt=TRUE, eval=FALSE, tidy=FALSE, strip.white=FALSE, comment=NA, highlight=FALSE, message=FALSE, warning=FALSE, size='scriptsize', fig.width=4, fig.height=4)
options(width=60, dev='pdf')
options(digits=3)
thm <- knit_theme$get("acid")
knit_theme$set(thm)
@


% Define document options
\documentclass[10pt]{beamer}
\mode<presentation>
\usetheme{AnnArbor}
% \usecolortheme{whale}
% Uncover everything in a step-wise fashion
% \beamerdefaultoverlayspecification{<+->}
% mathtools package for math symbols
% \usepackage{mathtools}
\usepackage[latin1]{inputenc}
\usepackage{hyperref}
\usepackage{fancybox}
\usepackage{url}
\usepackage[backend=bibtex,style=alphabetic]{biblatex} % bibstyle=numeric
% \bibliographystyle{amsalpha} % doesn't work
\addbibresource{FRE_lectures.bib}
% \addbibresource[location=remote]{http://www.citeulike.org/user/jerzyp}
\renewcommand\bibfont{\footnotesize}
\renewcommand{\pgfuseimage}[1]{\scalebox{0.75}{\includegraphics{#1}}} % scale bib icons
\setbeamertemplate{bibliography item}[text] % set bib icons
% \setbeamertemplate{bibliography item}{} % remove bib icons

% \usepackage{enumerate}
% \let\emph\textbf
% \let\alert\textbf
% Define colors for hyperlinks
\definecolor{links}{HTML}{2A1B81}
\hypersetup{colorlinks=true,linkcolor=,urlcolor=links}
% Make url text footnotesize
\renewcommand\UrlFont{\footnotesize}
% Make institute text italic and small
\setbeamerfont{institute}{size=\small,shape=\itshape,bg=red,fg=red}
\setbeamerfont{date}{size=\small}
\setbeamerfont{block title}{size=\normalsize} % shape=\itshape
\setbeamerfont{block body}{size=\footnotesize}



% Title page setup
\title[Data Analysis and Model Construction]{Data Analysis and Model Construction}
\subtitle{FRE6871 \& FRE7241, Spring 2016}
\institute[NYU Tandon]{NYU Tandon School of Engineering}
\titlegraphic{\includegraphics[scale=0.2]{image/tandon_long_color}}
\author[Jerzy Pawlowski]{Jerzy Pawlowski \emph{\href{mailto:jp3900@nyu.edu}{jp3900@nyu.edu}}}
% \email{jp3900@nyu.edu}
\date{\today}



%%%%%%%%%%%%%%%
\begin{document}


%%%%%%%%%%%%%%%
\maketitle


%%%%%%%%%%%%%%%
\section{Applying Functions Over Time Series}


%%%%%%%%%%%%%%%
\subsection{Defining Equally Spaced \protect\emph{Endpoints} of a Time Series}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      \emph{Endpoints} are a vector of indices that divide a time series into non-overlapping intervals,  
      \vskip1ex
      \emph{Endpoints} may be specified as integers or as date-time objects, 
      \vspace{-1em}
      <<chart_Series_endp,echo=((-1)),eval=FALSE>>=
library(quantmod)  # load package quantmod
# load minutely price data and extract a single day of data
sym_bol <- load("C:/Develop/data/SPY.RData")
price_s <- Cl(SPY["2012-02-13"])
# define number of data points per window
win_dow <- 30
# calculate number of "win_dows" that fit over "price_s"
n_row <- nrow(price_s)
num_agg <- n_row %/% win_dow
# if n_row==win_dow*num_agg then whole number 
# of "win_dows" fit over "price_s"
end_points <- win_dow*(0:num_agg)
# if (n_row > win_dow*num_agg) 
# then stub interval at beginning
end_points <- 
  c(0, n_row-win_dow*num_agg+win_dow*(0:num_agg))
# stub interval at end
end_points <- c(win_dow*(0:num_agg), n_row)
# plot data and endpoints as vertical lines
plot_theme <- chart_theme()
plot_theme$col$line.col <- "blue"
chart_Series(price_s, theme=plot_theme, 
    name="price data with endpoints as vertical lines")
abline(v=end_points, col='red')
      @
    \column{0.5\textwidth}
      \includegraphics[width=0.5\paperwidth,valign=t]{figure/chart_Series_endp.png}\\
      \vskip1ex
      \emph{Endpoints} may be equally spaced, with a fixed number of data points between neighboring \emph{endpoints}, 
      \vskip1ex
      If all the data points don't fit into a whole number of intervals, then a stub interval is needed to fit the remaining data points, 
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Extracting \protect\emph{Endpoints} of \texttt{xts} Time Series}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The \emph{endpoints} of an \texttt{xts} form a vector of non-overlapping date-time intervals,
      \vskip1ex
      The function \texttt{endpoints()} extracts the indices of the last observations in each period of time of an \texttt{xts} series,
      \vskip1ex
      For example:\\ \-\ \texttt{endpoints(x, on="hours")}\\
      extracts the indices of the last observations in each hour,
      \vskip1ex
      The vector of \emph{endpoints} isn't always equally spaced, 
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=(-(1))>>=
# library(xts)  # load package xts
# extract indices of the last observations in each hour
end_points <- endpoints(price_s, on='hours')
head(end_points)
# extract the last observations in each hour
head(price_s[end_points, ])
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Applying Functions Over \texttt{xts} Series Using \texttt{sapply()}}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The \texttt{apply()} functionals allow for applying a function over intervals of an \texttt{xts} series defined by a vector of \emph{endpoints},
      \vskip1ex
      The \texttt{sapply()} functional by default returns a vector or matrix, not an \texttt{xts} series,
      \vskip1ex
      The vector or matrix returned by \texttt{sapply()} therefore needs to be coerced into an \texttt{xts} series,
      \vskip1ex
      The function \texttt{chart\_Series()} from package \texttt{quantmod} can produce a variety of time series plots, 
      \vskip1ex
      \texttt{chart\_Series()} plots can be modified by modifying \emph{plot objects} or \emph{theme objects},
      \vskip1ex
      A plot \emph{theme object} is a list containing parameters that determine the plot appearance (colors, size, fonts),
      \vskip1ex
      The function \texttt{chart\_theme()} returns the theme object, 
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=(-(1)),eval=FALSE>>=
# library(xts)  # load package xts
end_points <- # define end_points with beginning stub
  c(0, n_row-win_dow*num_agg+win_dow*(0:num_agg))
len_gth <- length(end_points)
# define starting points as lag of end_points
start_points <- end_points[c(1, 1:(len_gth-1))]
# perform sapply() loop over length of end_points
agg_regations <- sapply(2:len_gth, 
    function(in_dex) {
      x_ts <- 
        price_s[(start_points[in_dex] + 1):end_points[in_dex]]
      c(max=max(x_ts), min=min(x_ts))
  })  # end sapply
# coerce agg_regations into matrix and transpose it
if (is.vector(agg_regations))
  agg_regations <- t(agg_regations)
agg_regations <- t(agg_regations)
# coerce agg_regations into xts series
agg_regations <- xts(agg_regations, 
                     order.by=index(price_s[end_points]))
head(agg_regations)
# plot aggregations with custom line colors
plot_theme <- chart_theme()
plot_theme$col$line.col <- c("red", "green")
chart_Series(agg_regations, theme=plot_theme, 
             name="price aggregations")
legend("bottomright", legend=colnames(agg_regations), 
bg="white", lty=c(1, 1), lwd=c(2, 2), 
col=plot_theme$col$line.col, bty="n")
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Applying Functions Over \texttt{xts} Series Using \texttt{lapply()}}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The \texttt{apply()} functionals allow for applying a function over intervals of an \texttt{xts} series defined by a vector of \emph{endpoints},
      \vskip1ex
      The \texttt{lapply()} functional by default returns a list, not an \texttt{xts} series,
      \vskip1ex
      If \texttt{lapply()} returns a list of \texttt{xts} series, then this list can be collapsed into a single \texttt{xts} series using the function \texttt{do\_call\_rbind()} from package \texttt{HighFreq}, 
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=TRUE,eval=FALSE>>=
library(HighFreq)  # load package HighFreq
end_points <- # define end_points with beginning stub
  c(0, n_row-win_dow*num_agg+win_dow*(0:num_agg))
len_gth <- length(end_points)
# define starting points as lag of end_points
start_points <- end_points[c(1, 1:(len_gth-1))]
# perform lapply() loop over length of end_points
agg_regations <- lapply(2:len_gth, 
    function(in_dex) {
      x_ts <- 
        price_s[(start_points[in_dex] + 1):end_points[in_dex]]
      xts(t(c(max=max(x_ts), min=min(x_ts))), 
            order.by=index(price_s[end_points[in_dex]]))
  })  # end lapply
# recursively "rbind" the list into a single xts
agg_regations <- do_call_rbind(agg_regations)
head(agg_regations)
# plot aggregations with custom line colors
plot_theme <- chart_theme()
plot_theme$col$line.col <- c("red", "green")
chart_Series(agg_regations, theme=plot_theme, 
             name="price aggregations")
legend("bottomright", legend=colnames(agg_regations), 
bg="white", lty=c(1, 1), lwd=c(2, 2), 
col=plot_theme$col$line.col, bty="n")
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Applying Functions Over \texttt{xts} Series Using \texttt{period.apply()}}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The functional \texttt{period.apply()} from package \texttt{xts} performs \emph{aggregations} by applying a function over a vector of \emph{endpoints},
      \vskip1ex
      The package \texttt{xts} also has several specialized and optimized (fast) functionals for aggregating data over \emph{endpoints}:
      \begin{itemize}
        \item \texttt{period.sum()} calculate the sum for each period,
        \item \texttt{period.max()} calculate the maximum for each period,
        \item \texttt{period.min()} calculate the minimum for each period,
        \item \texttt{period.prod()} calculate the product for each period,
      \end{itemize}
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=(-(1))>>=
# library(xts)  # load package xts
# apply "mean" over end_points
period_mean <- period.apply(x_ts, INDEX=end_points, 
                     FUN=mean)
head(period_mean)
period_sum <- period.sum(x_ts, INDEX=end_points)
head(period_sum)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Applying Functions to \texttt{xts} Over Calendar Periods}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The package \texttt{xts} has convenience wrapper functionals for \texttt{period.apply()}, that apply functions over calendar periods:
      \begin{itemize}
        \item \texttt{apply.daily()} applies functions over daily periods,
        \item \texttt{apply.weekly()} applies functions over weekly periods,
        \item \texttt{apply.monthly()} applies functions over monthly periods,
        \item \texttt{apply.quarterly()} applies functions over quarterly periods,
        \item \texttt{apply.yearly()} applies functions over yearly periods,
      \end{itemize}
      These functionals don't require specifying a vector of \emph{endpoints}, because they determine the \emph{endpoints} from the calendar periods, 
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=(-(1:3))>>=
# library(quantmod)  # load package quantmod
# load minutely price data
# sym_bol <- load("C:/Develop/data/SPY.RData")
# extract closing prices
x_ts <- Cl(SPY)
# apply "mean" over monthly periods
period_mean <- apply.monthly(x_ts, FUN=mean)
head(period_mean)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Applying Functions Over Rolling Margins}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      There are several other functionals designed for applying functions over rolling margins: 
      \begin{itemize}
        \item \texttt{rollapply.zoo} from package \texttt{zoo},
        \item \texttt{rollapply.xts} from package \texttt{xts},
        \item \texttt{apply.rolling} from package \texttt{PerformanceAnalytics},
      \end{itemize}
      These functionals don't require specifying the \emph{endpoints}, and instead calculate the \emph{endpoints} from the rolling window width, 
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=TRUE,eval=FALSE>>=
# library(xts)  # load package xts
# apply "mean" over window with width=11
period_mean <- rollapply(x_ts, width=11, 
                    FUN=mean, align="right")
# apply "mean" over window with width=11
library(PerformanceAnalytics)  # load package PerformanceAnalytics
period_mean <- apply.rolling(x_ts, 
                    width=11, FUN=mean)
      @
  \end{columns}
\end{block}

\end{frame}


%%%%%%%%%%%%%%%
\subsection{Applying Functions Over Overlapping Date-time Intervals}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.4\textwidth}
      The functional \texttt{period.apply()} performs aggregations over \emph{non-overlapping} intervals, 
      \vskip1ex
      Oftentimes it's necessary to perform aggregations over \emph{overlapping} intervals, defined by a vector of \emph{endpoints} and the number of \emph{look-back} time intervals, 
      \vskip1ex
      The \emph{starting points} are defined as the \emph{endpoints} lagged by the number of \emph{look-back} time intervals, 
    \column{0.6\textwidth}
      \vspace{-1em}
      <<echo=TRUE,eval=FALSE>>=
library(HighFreq)  # load package HighFreq
end_points <- # define end_points with beginning stub
  c(0, n_row-win_dow*num_agg+win_dow*(0:num_agg))
len_gth <- length(end_points)
# define number of look-back time intervals
look_back <- 3
# define starting points as lag of end_points
start_points <- end_points[c(rep_len(1, look_back), 1:(len_gth-look_back))]
cbind(start_points, end_points)
# perform lapply() loop over length of end_points
agg_regations <- lapply(2:len_gth, 
    function(in_dex) {
      x_ts <- 
        price_s[(start_points[in_dex] + 1):end_points[in_dex]]
      xts(t(c(max=max(x_ts), min=min(x_ts))), 
            order.by=index(price_s[end_points[in_dex]]))
  })  # end lapply
# recursively "rbind" the list into a single xts
agg_regations <- do_call_rbind(agg_regations)
# plot aggregations with custom line colors
plot_theme <- chart_theme()
plot_theme$col$line.col <- c("red", "green")
chart_Series(agg_regations, theme=plot_theme, 
             name="price aggregations")
legend("bottomright", legend=colnames(agg_regations), 
bg="white", lty=c(1, 1), lwd=c(2, 2), 
col=plot_theme$col$line.col, bty="n")
      @
  \end{columns}
\end{block}

\end{frame}



%%%%%%%%%%%%%%%
\section{High Frequency and Intraday Time Series Data}


%%%%%%%%%%%%%%%
\subsection{\texttt{CumReturns} Plots}
\begin{frame}[fragile,t]{\subsecname}
\vspace{-1em}
\begin{block}{}
  \begin{columns}[T]
    \column{0.5\textwidth}
      High Frequency and Intraday Time Series Data
      tick-by-tick data, trade and quote data, order book data, 
      \texttt{chart.CumReturns()} plots the cumulative returns of a time series of returns,
      <<foo_chart,echo=TRUE,eval=FALSE,fig.width=7,fig.height=6,fig.show='hide'>>=
# load package "PerformanceAnalytics"
library(PerformanceAnalytics)
data(managers)  # load "managers" data set
ham_1 <- managers[, c("HAM1", "EDHEC LS EQ", 
                      "SP500 TR")]

chart.CumReturns(ham_1, lwd=2, ylab="", 
        legend.loc="topleft", main="")
# add title
title(main="Managers cumulative returns", 
      line=-1)
      @
    \column{0.5\textwidth}
    \vspace{-2em}
      \includegraphics[width=0.5\paperwidth,valign=t]{figure/cum_returns-1}
  \end{columns}
\end{block}

\end{frame}



\end{document}
